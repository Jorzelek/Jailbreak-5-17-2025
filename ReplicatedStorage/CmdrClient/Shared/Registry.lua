-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 

-- Decompiled by Krnl

local v_u_1 = game:GetService("RunService")
local v_u_2 = require(script.Parent.Util)
local v_u_19 = {
	["TypeMethods"] = v_u_2.MakeDictionary({
		"Transform",
		"Validate",
		"Autocomplete",
		"Parse",
		"DisplayName",
		"Listable",
		"ValidateOnce",
		"Prefixes",
		"Default"
	}),
	["CommandMethods"] = v_u_2.MakeDictionary({
		"Name",
		"Aliases",
		"AutoExec",
		"Description",
		"Args",
		"Run",
		"ClientRun",
		"Data",
		"Group"
	}),
	["CommandArgProps"] = v_u_2.MakeDictionary({
		"Name",
		"Type",
		"Description",
		"Optional",
		"Default"
	}),
	["Types"] = {},
	["TypeAliases"] = {},
	["Commands"] = {},
	["CommandsArray"] = {},
	["Cmdr"] = nil,
	["Hooks"] = {
		["BeforeRun"] = {},
		["AfterRun"] = {}
	},
	["Stores"] = setmetatable({}, {
		["__index"] = function(p3, p4)
			p3[p4] = {}
			return p3[p4]
		end
	}),
	["AutoExecBuffer"] = {},
	["RegisterType"] = function(p5, p6, p7)
		if not p6 or typeof(p6) ~= "string" then
			error("Invalid type name provided: nil")
		end
		if not p6:find("^[%d%l]%w*$") then
			error(("Invalid type name provided: \"%s\", type names must be alphanumeric and start with a lower-case letter or a digit."):format(p6))
		end
		for v8 in pairs(p7) do
			if p5.TypeMethods[v8] == nil then
				error("Unknown key/method in type \"" .. p6 .. "\": " .. v8)
			end
		end
		if p5.Types[p6] ~= nil then
			error(("Type \"%s\" has already been registered."):format(p6))
		end
		p7.Name = p6
		p7.DisplayName = p7.DisplayName or p6
		p5.Types[p6] = p7
		if p7.Prefixes then
			p5:RegisterTypePrefix(p6, p7.Prefixes)
		end
	end,
	["RegisterTypePrefix"] = function(p9, p10, p11)
		if not p9.TypeAliases[p10] then
			p9.TypeAliases[p10] = p10
		end
		p9.TypeAliases[p10] = ("%s %s"):format(p9.TypeAliases[p10], p11)
	end,
	["RegisterTypeAlias"] = function(p12, p13, p14)
		local v15 = p12.TypeAliases[p13] == nil
		assert(v15, ("Type alias %s already exists!"):format(p14))
		p12.TypeAliases[p13] = p14
	end,
	["RegisterTypesIn"] = function(p16, p17)
		for _, v18 in pairs(p17:GetChildren()) do
			if v18:IsA("ModuleScript") then
				v18.Parent = p16.Cmdr.ReplicatedRoot.Types
				require(v18)(p16)
			else
				p16:RegisterTypesIn(v18)
			end
		end
	end
}
v_u_19.RegisterHooksIn = v_u_19.RegisterTypesIn
function v_u_19.RegisterCommandObject(p20, p21, _)
	-- upvalues: (copy) v_u_1
	for v22 in pairs(p21) do
		if p20.CommandMethods[v22] == nil then
			error("Unknown key/method in command " .. (p21.Name or "unknown command") .. ": " .. v22)
		end
	end
	if p21.Args then
		for v23, v24 in pairs(p21.Args) do
			if type(v24) == "table" then
				for v25 in pairs(v24) do
					if p20.CommandArgProps[v25] == nil then
						error(("Unknown property in command \"%s\" argument #%d: %s"):format(p21.Name or "unknown", v23, v25))
					end
				end
			end
		end
	end
	if p21.AutoExec and v_u_1:IsClient() then
		local v26 = p20.AutoExecBuffer
		local v27 = p21.AutoExec
		table.insert(v26, v27)
		p20:FlushAutoExecBufferDeferred()
	end
	local v28 = p20.Commands[p21.Name:lower()]
	if v28 and v28.Aliases then
		for _, v29 in pairs(v28.Aliases) do
			p20.Commands[v29:lower()] = nil
		end
	elseif not v28 then
		local v30 = p20.CommandsArray
		table.insert(v30, p21)
	end
	p20.Commands[p21.Name:lower()] = p21
	if p21.Aliases then
		for _, v31 in pairs(p21.Aliases) do
			p20.Commands[v31:lower()] = p21
		end
	end
end
function v_u_19.RegisterCommand(p32, p33, p34, p35)
	local v36 = require(p33)
	local v37 = typeof(v36) == "table"
	local v38 = ("Invalid return value from command script \"%*\" (CommandDefinition expected, got %*)"):format(p33.Name, (typeof(v36)))
	assert(v37, v38)
	if p34 then
		v36.Run = require(p34)
	end
	if not p35 or p35(v36) then
		p32:RegisterCommandObject(v36)
		p33.Parent = p32.Cmdr.ReplicatedRoot.Commands
	end
end
function v_u_19.RegisterCommandsIn(p39, p40, p41)
	local v42 = {}
	local v43 = {}
	for _, v44 in pairs(p40:GetChildren()) do
		if v44:IsA("ModuleScript") then
			if v44.Name:find("Server") then
				v42[v44] = true
			else
				local v45 = p40:FindFirstChild(v44.Name .. "Server")
				if v45 then
					v43[v45] = true
				end
				p39:RegisterCommand(v44, v45, p41)
			end
		else
			p39:RegisterCommandsIn(v44, p41)
		end
	end
	for v46 in pairs(v42) do
		if not v43[v46] then
			warn("Command script " .. v46.Name .. " was skipped because it has \'Server\' in its name, and has no equivalent shared script.")
		end
	end
end
function v_u_19.RegisterDefaultCommands(p47, p_u_48)
	-- upvalues: (copy) v_u_2
	local v49 = type(p_u_48) == "table"
	if v49 then
		p_u_48 = v_u_2.MakeDictionary(p_u_48)
	end
	p47:RegisterCommandsIn(p47.Cmdr.DefaultCommandsFolder, v49 and function(p50)
		-- upvalues: (ref) p_u_48
		return p_u_48[p50.Group] or false
	end or p_u_48)
end
function v_u_19.GetCommand(p51, p52)
	return p51.Commands[(p52 or ""):lower()]
end
function v_u_19.GetCommands(p53)
	return p53.CommandsArray
end
function v_u_19.GetCommandNames(p54)
	local v55 = {}
	for _, v56 in pairs(p54.CommandsArray) do
		local v57 = v56.Name
		table.insert(v55, v57)
	end
	return v55
end
v_u_19.GetCommandsAsStrings = v_u_19.GetCommandNames
function v_u_19.GetTypeNames(p58)
	local v59 = {}
	for v60 in pairs(p58.Types) do
		table.insert(v59, v60)
	end
	return v59
end
function v_u_19.GetType(p61, p62)
	return p61.Types[p62]
end
function v_u_19.GetTypeName(p63, p64)
	return p63.TypeAliases[p64] or p64
end
function v_u_19.RegisterHook(p65, p66, p67, p68)
	if not p65.Hooks[p66] then
		error(("Invalid hook name: %q"):format(p66), 2)
	end
	local v69 = p65.Hooks[p66]
	table.insert(v69, {
		["callback"] = p67,
		["priority"] = p68 or 0
	})
	table.sort(p65.Hooks[p66], function(p70, p71)
		return p70.priority < p71.priority
	end)
end
v_u_19.AddHook = v_u_19.RegisterHook
function v_u_19.GetStore(p72, p73)
	return p72.Stores[p73]
end
function v_u_19.FlushAutoExecBufferDeferred(p_u_74)
	-- upvalues: (copy) v_u_1
	if not p_u_74.AutoExecFlushConnection then
		p_u_74.AutoExecFlushConnection = v_u_1.Heartbeat:Connect(function()
			-- upvalues: (copy) p_u_74
			p_u_74.AutoExecFlushConnection:Disconnect()
			p_u_74.AutoExecFlushConnection = nil
			p_u_74:FlushAutoExecBuffer()
		end)
	end
end
function v_u_19.FlushAutoExecBuffer(p75)
	for _, v76 in ipairs(p75.AutoExecBuffer) do
		for _, v77 in ipairs(v76) do
			p75.Cmdr.Dispatcher:EvaluateAndRun(v77)
		end
	end
	p75.AutoExecBuffer = {}
end
return function(p78)
	-- upvalues: (copy) v_u_19
	v_u_19.Cmdr = p78
	return v_u_19
end
