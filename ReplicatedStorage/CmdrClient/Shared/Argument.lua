-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- BgNOBmlwYWlycwIlLgIlPwIlKgQlKiUqAVwCJSUABGdzdWIRdW5lc2NhcGVPcGVyYXRvcnMHQ29tbWFuZARUeXBlBE5hbWUGT2JqZWN0CFJlcXVpcmVkCEV4ZWN1dG9yCFJhd1ZhbHVlC1Jhd1NlZ21lbnRzEVRyYW5zZm9ybWVkVmFsdWVzBlByZWZpeBVUZXh0U2VnbWVudEluUHJvZ3Jlc3MaUmF3U2VnbWVudHNBcmVBdXRvY29tcGxldGUHRGVmYXVsdAhPcHRpb25hbAR0eXBlBXRhYmxlFlBhcnNlUHJlZml4ZWRVbmlvblR5cGUEQ21kcghSZWdpc3RyeQtHZXRUeXBlTmFtZQpEaXNwYXRjaGVyB0dldFR5cGUFZXJyb3IGc3RyaW5nBmZvcm1hdB4lcyBoYXMgYW4gdW5yZWdpc3RlcmVkIHR5cGUgJXEGPG5vbmU+DHNldG1ldGF0YWJsZQlUcmFuc2Zvcm0DbmV3DEF1dG9jb21wbGV0ZRBUcmFuc2Zvcm1TZWdtZW50FkdldERlZmF1bHRBdXRvY29tcGxldGUBLgE/CUlzUGFydGlhbARtYXRoBnJhbmRvbQhMaXN0YWJsZQleJT8oJWQrKSQFbWF0Y2gIdG9udW1iZXIDbWluBnJlbW92ZQZpbnNlcnQGY29uY2F0ASwBKgIqKhFTcGxpdFN0cmluZ1NpbXBsZQNzdWIGdW5wYWNrE0dldFRyYW5zZm9ybWVkVmFsdWUaVGhpcyBhcmd1bWVudCBpcyByZXF1aXJlZC4IVmFsaWRhdGUMVmFsaWRhdGVPbmNlDUludmFsaWQgdmFsdWUPR2V0QXV0b2NvbXBsZXRlBVBhcnNlClBhcnNlVmFsdWUyTGlzdGFibGUgdHlwZXMgbXVzdCByZXR1cm4gYSB0YWJsZSBmcm9tIFBhcnNlICglcykFcGFpcnMIR2V0VmFsdWUHcmVxdWlyZQZzY3JpcHQGUGFyZW50BFV0aWwHX19pbmRleAALDQEAAAAAG6QBAQAAAABA/wIAAAQAAABvBAIAbwUDAG8GBABvBwUAxQIEBQEAAACfAQIEUQEMAG8JBgBSCgUAcwgJCm8LBwBvDAgAvAkFzAkAAACfCQQAvAYAzAkAAACfBgACUgAGAG4B8/8CAACAggACAAoDAQQAAABAAwIDAwMEAwUDBgMH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

-- Decompiled by Krnl

local v_u_1 = require(script.Parent.Util)
local function v_u_4(p2)
	for _, v3 in ipairs({
		"%.",
		"%?",
		"%*",
		"%*%*"
	}) do
		p2 = p2:gsub("\\" .. v3, v3:gsub("%%", ""))
	end
	return p2
end
local v_u_5 = {}
v_u_5.__index = v_u_5
function v_u_5.new(p6, p7, p8)
	-- upvalues: (copy) v_u_1, (copy) v_u_5
	local v9 = {
		["Command"] = p6,
		["Type"] = nil,
		["Name"] = p7.Name,
		["Object"] = p7
	}
	local v10
	if p7.Default == nil then
		v10 = p7.Optional ~= true
	else
		v10 = false
	end
	v9.Required = v10
	v9.Executor = p6.Executor
	v9.RawValue = p8
	v9.RawSegments = {}
	v9.TransformedValues = {}
	v9.Prefix = ""
	v9.TextSegmentInProgress = ""
	v9.RawSegmentsAreAutocomplete = false
	local v11 = p7.Type
	if type(v11) == "table" then
		v9.Type = p7.Type
	else
		local v12, v13, v14 = v_u_1.ParsePrefixedUnionType(p6.Cmdr.Registry:GetTypeName(p7.Type), p8)
		v9.Type = p6.Dispatcher.Registry:GetType(v12)
		v9.RawValue = v13
		v9.Prefix = v14
		if v9.Type == nil then
			error(string.format("%s has an unregistered type %q", v9.Name or "<none>", v12 or "<none>"))
		end
	end
	local v15 = v_u_5
	setmetatable(v9, v15)
	v9:Transform()
	return v9
end
function v_u_5.GetDefaultAutocomplete(p16)
	if not p16.Type.Autocomplete then
		return {}
	end
	local v17, v18 = p16.Type.Autocomplete(p16:TransformSegment(""))
	return v17, v18 or {}
end
function v_u_5.Transform(p19)
	-- upvalues: (copy) v_u_4, (copy) v_u_1
	if #p19.TransformedValues == 0 then
		local v20 = p19.RawValue
		if v20 == "." and p19.Type.Default then
			v20 = p19.Type.Default(p19.Executor) or ""
			p19.RawSegmentsAreAutocomplete = true
		end
		if v20 == "?" and p19.Type.Autocomplete then
			local v21, v22 = p19:GetDefaultAutocomplete()
			if not v22.IsPartial and #v21 > 0 then
				v20 = v21[math.random(1, #v21)]
				p19.RawSegmentsAreAutocomplete = true
			end
		end
		if p19.Type.Listable and #p19.RawValue > 0 then
			local v23 = v20:match("^%?(%d+)$")
			if v23 then
				local v24 = tonumber(v23)
				if v24 and v24 > 0 then
					local v25 = {}
					local v26, v27 = p19:GetDefaultAutocomplete()
					if not v27.IsPartial and #v26 > 0 then
						local v28 = #v26
						for _ = 1, math.min(v24, v28) do
							local v29 = table.remove
							local v30 = math.random
							local v31 = #v26
							table.insert(v25, v29(v26, v30(1, v31)))
						end
						v20 = table.concat(v25, ",")
						p19.RawSegmentsAreAutocomplete = true
					end
				end
			elseif v20 == "*" or v20 == "**" then
				local v32, v33 = p19:GetDefaultAutocomplete()
				if not v33.IsPartial and #v32 > 0 then
					if v20 == "**" and p19.Type.Default then
						local v34 = p19.Type.Default(p19.Executor) or ""
						for v35, v36 in ipairs(v32) do
							if v36 == v34 then
								table.remove(v32, v35)
							end
						end
					end
					v20 = table.concat(v32, ",")
					p19.RawSegmentsAreAutocomplete = true
				end
			end
			local v37 = v_u_4(v20)
			local v38 = v_u_1.SplitStringSimple(v37, ",")
			local v39 = #v38 == 0 and { "" } or v38
			if v37:sub(#v37, #v37) == "," then
				v39[#v39 + 1] = ""
			end
			for v40, v41 in ipairs(v39) do
				p19.RawSegments[v40] = v41
				p19.TransformedValues[v40] = { p19:TransformSegment(v41) }
			end
			p19.TextSegmentInProgress = v39[#v39]
		else
			local v42 = v_u_4(v20)
			p19.RawSegments[1] = v_u_4(v42)
			p19.TransformedValues[1] = { p19:TransformSegment(v42) }
			p19.TextSegmentInProgress = p19.RawValue
		end
	else
		return
	end
end
function v_u_5.TransformSegment(p43, p44)
	if p43.Type.Transform then
		return p43.Type.Transform(p44, p43.Executor)
	else
		return p44
	end
end
function v_u_5.GetTransformedValue(p45, p46)
	local v47 = p45.TransformedValues[p46]
	return unpack(v47)
end
function v_u_5.Validate(p48, p49)
	if p48.RawValue == nil or #p48.RawValue == 0 and p48.Required == false then
		return true
	end
	if p48.Required and (p48.RawSegments[1] == nil or #p48.RawSegments[1] == 0) then
		return false, "This argument is required."
	end
	if not (p48.Type.Validate or p48.Type.ValidateOnce) then
		return true
	end
	for v50 = 1, #p48.TransformedValues do
		if p48.Type.Validate then
			local v51, v52 = p48.Type.Validate(p48:GetTransformedValue(v50))
			if not v51 then
				return v51, v52 or "Invalid value"
			end
		end
		if p49 and p48.Type.ValidateOnce then
			local v53, v54 = p48.Type.ValidateOnce(p48:GetTransformedValue(v50))
			if not v53 then
				return v53, v54
			end
		end
	end
	return true
end
function v_u_5.GetAutocomplete(p55)
	return not p55.Type.Autocomplete and {} or p55.Type.Autocomplete(p55:GetTransformedValue(#p55.TransformedValues))
end
function v_u_5.ParseValue(p56, p57)
	if p56.Type.Parse then
		return p56.Type.Parse(p56:GetTransformedValue(p57))
	else
		return p56:GetTransformedValue(p57)
	end
end
function v_u_5.GetValue(p58)
	if #p58.RawValue == 0 and (not p58.Required and p58.Object.Default ~= nil) then
		return p58.Object.Default
	end
	if not p58.Type.Listable then
		return p58:ParseValue(1)
	end
	local v59 = {}
	for v60 = 1, #p58.TransformedValues do
		local v61 = p58:ParseValue(v60)
		if type(v61) ~= "table" then
			error(("Listable types must return a table from Parse (%s)"):format(p58.Type.Name))
		end
		for _, v62 in pairs(v61) do
			v59[v62] = true
		end
	end
	local v63 = {}
	for v64 in pairs(v59) do
		v63[#v63 + 1] = v64
	end
	return v63
end
return v_u_5
