-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- BgM/B3Jlc3VsdHMJbm9kZVN0YWNrDGNvbnRleHRTdGFjaxdleHBlY3RhdGlvbkNvbnRleHRTdGFjaw1oYXNGb2N1c05vZGVzA25ldwxzZXRtZXRhdGFibGUGc3RhdHVzCHBsYW5Ob2RlBHR5cGUITm9kZVR5cGUCSXQKVGVzdFN0YXR1cwdTdWNjZXNzDHN1Y2Nlc3NDb3VudAdGYWlsdXJlDGZhaWx1cmVDb3VudAdTa2lwcGVkDHNraXBwZWRDb3VudA12aXNpdEFsbE5vZGVzD2NhbGN1bGF0ZVRvdGFscwZlcnJvcnMGaXBhaXJzBXRhYmxlBmluc2VydAxnYXRoZXJFcnJvcnMFZXJyb3I6Q2Fubm90IGZpbmFsaXplIFRlc3RSZXN1bHRzIHdpdGggbm9kZXMgc3RpbGwgb24gdGhlIHN0YWNrIQhmaW5hbGl6ZQpjcmVhdGVOb2RlCGNoaWxkcmVuCHB1c2hOb2RlJlRyaWVkIHRvIHBvcCBmcm9tIGFuIGVtcHR5IG5vZGUgc3RhY2shBmFzc2VydAZyZW1vdmUHcG9wTm9kZSlUcmllZCB0byBnZXQgY29udGV4dCBmcm9tIGFuIGVtcHR5IHN0YWNrIQpnZXRDb250ZXh0NFRyaWVkIHRvIGdldCBleHBlY3RhdGlvbkNvbnRleHQgZnJvbSBhbiBlbXB0eSBzdGFjayEVZ2V0RXhwZWN0YXRpb25Db250ZXh0CG1vZGlmaWVyDE5vZGVNb2RpZmllcgRTa2lwBUZvY3VzCnNob3VsZFNraXAvQXR0ZW1wdGluZyB0byBzZXQgc3VjY2VzcyBzdGF0dXMgb24gZW1wdHkgc3RhY2sKc2V0U3VjY2Vzcy9BdHRlbXB0aW5nIHRvIHNldCBza2lwcGVkIHN0YXR1cyBvbiBlbXB0eSBzdGFjawpzZXRTa2lwcGVkLUF0dGVtcHRpbmcgdG8gc2V0IGVycm9yIHN0YXR1cyBvbiBlbXB0eSBzdGFjawhzZXRFcnJvcgZwaHJhc2UNYWRkRHVtbXlFcnJvcjVBdHRlbXB0aW5nIHRvIHNldCBzdGF0dXMgZnJvbSBjaGlsZHJlbiBvbiBlbXB0eSBzdGFjaxVzZXRTdGF0dXNGcm9tQ2hpbGRyZW4HcmVxdWlyZQZzY3JpcHQGUGFyZW50CFRlc3RF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

-- Decompiled by Krnl

local v_u_1 = require(script.Parent.TestEnum)
local v_u_2 = require(script.Parent.TestResults)
local v_u_3 = require(script.Parent.Context)
local v_u_4 = require(script.Parent.ExpectationContext)
local v_u_5 = {}
v_u_5.__index = v_u_5
function v_u_5.new(p6)
	-- upvalues: (copy) v_u_2, (copy) v_u_5
	local v7 = {
		["results"] = v_u_2.new(p6),
		["nodeStack"] = {},
		["contextStack"] = {},
		["expectationContextStack"] = {},
		["hasFocusNodes"] = false
	}
	local v8 = v_u_5
	setmetatable(v7, v8)
	return v7
end
function v_u_5.calculateTotals(p9)
	-- upvalues: (copy) v_u_1
	local v_u_10 = p9.results
	v_u_10.successCount = 0
	v_u_10.failureCount = 0
	v_u_10.skippedCount = 0
	v_u_10:visitAllNodes(function(p11)
		-- upvalues: (ref) v_u_1, (copy) v_u_10
		local v12 = p11.status
		if p11.planNode.type == v_u_1.NodeType.It then
			if v12 == v_u_1.TestStatus.Success then
				v_u_10.successCount = v_u_10.successCount + 1
				return
			end
			if v12 == v_u_1.TestStatus.Failure then
				v_u_10.failureCount = v_u_10.failureCount + 1
				return
			end
			if v12 == v_u_1.TestStatus.Skipped then
				v_u_10.skippedCount = v_u_10.skippedCount + 1
			end
		end
	end)
end
function v_u_5.gatherErrors(p13)
	local v_u_14 = p13.results
	v_u_14.errors = {}
	v_u_14:visitAllNodes(function(p15)
		-- upvalues: (copy) v_u_14
		if #p15.errors > 0 then
			for _, v16 in ipairs(p15.errors) do
				local v17 = v_u_14.errors
				table.insert(v17, v16)
			end
		end
	end)
end
function v_u_5.finalize(p18)
	if #p18.nodeStack ~= 0 then
		error("Cannot finalize TestResults with nodes still on the stack!", 2)
	end
	p18:calculateTotals()
	p18:gatherErrors()
	return p18.results
end
function v_u_5.pushNode(p19, p20)
	-- upvalues: (copy) v_u_2, (copy) v_u_3, (copy) v_u_4
	local v21 = v_u_2.createNode(p20)
	local v22 = (p19.nodeStack[#p19.nodeStack] or p19.results).children
	table.insert(v22, v21)
	local v23 = p19.nodeStack
	table.insert(v23, v21)
	local v24 = p19.contextStack[#p19.contextStack]
	local v25 = v_u_3.new(v24)
	local v26 = p19.contextStack
	table.insert(v26, v25)
	local v27 = p19.expectationContextStack[#p19.expectationContextStack]
	local v28 = v_u_4.new(v27)
	local v29 = p19.expectationContextStack
	table.insert(v29, v28)
end
function v_u_5.popNode(p30)
	local v31 = #p30.nodeStack > 0
	assert(v31, "Tried to pop from an empty node stack!")
	table.remove(p30.nodeStack, #p30.nodeStack)
	table.remove(p30.contextStack, #p30.contextStack)
	table.remove(p30.expectationContextStack, #p30.expectationContextStack)
end
function v_u_5.getContext(p32)
	local v33 = #p32.contextStack > 0
	assert(v33, "Tried to get context from an empty stack!")
	return p32.contextStack[#p32.contextStack]
end
function v_u_5.getExpectationContext(p34)
	local v35 = #p34.expectationContextStack > 0
	assert(v35, "Tried to get expectationContext from an empty stack!")
	return p34.expectationContextStack[#p34.expectationContextStack]
end
function v_u_5.shouldSkip(p36)
	-- upvalues: (copy) v_u_1
	if p36.hasFocusNodes then
		for v37 = #p36.nodeStack, 1, -1 do
			local v38 = p36.nodeStack[v37]
			if v38.planNode.modifier == v_u_1.NodeModifier.Skip then
				return true
			end
			if v38.planNode.modifier == v_u_1.NodeModifier.Focus then
				return false
			end
		end
		return true
	else
		for v39 = #p36.nodeStack, 1, -1 do
			if p36.nodeStack[v39].planNode.modifier == v_u_1.NodeModifier.Skip then
				return true
			end
		end
		return false
	end
end
function v_u_5.setSuccess(p40)
	-- upvalues: (copy) v_u_1
	local v41 = #p40.nodeStack > 0
	assert(v41, "Attempting to set success status on empty stack")
	p40.nodeStack[#p40.nodeStack].status = v_u_1.TestStatus.Success
end
function v_u_5.setSkipped(p42)
	-- upvalues: (copy) v_u_1
	local v43 = #p42.nodeStack > 0
	assert(v43, "Attempting to set skipped status on empty stack")
	p42.nodeStack[#p42.nodeStack].status = v_u_1.TestStatus.Skipped
end
function v_u_5.setError(p44, p45)
	-- upvalues: (copy) v_u_1
	local v46 = #p44.nodeStack > 0
	assert(v46, "Attempting to set error status on empty stack")
	local v47 = p44.nodeStack[#p44.nodeStack]
	v47.status = v_u_1.TestStatus.Failure
	local v48 = v47.errors
	table.insert(v48, p45)
end
function v_u_5.addDummyError(p49, p50, p51)
	-- upvalues: (copy) v_u_1
	p49:pushNode({
		["type"] = v_u_1.NodeType.It,
		["phrase"] = p50
	})
	p49:setError(p51)
	p49:popNode()
	p49.nodeStack[#p49.nodeStack].status = v_u_1.TestStatus.Failure
end
function v_u_5.setStatusFromChildren(p52)
	-- upvalues: (copy) v_u_1
	local v53 = #p52.nodeStack > 0
	assert(v53, "Attempting to set status from children on empty stack")
	local v54 = p52.nodeStack[#p52.nodeStack]
	local v55 = v_u_1.TestStatus.Success
	local v56 = true
	for _, v57 in ipairs(v54.children) do
		if v57.status ~= v_u_1.TestStatus.Skipped then
			v56 = false
			if v57.status == v_u_1.TestStatus.Failure then
				v55 = v_u_1.TestStatus.Failure
			end
		end
	end
	if v56 then
		v55 = v_u_1.TestStatus.Skipped
	end
	v54.status = v55
end
return v_u_5
