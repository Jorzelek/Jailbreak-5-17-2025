-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 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

-- Decompiled by Krnl

local v_u_28 = {
	["new"] = function(p1)
		-- upvalues: (copy) v_u_28
		local v2 = v_u_28
		return setmetatable({
			["_accel"] = p1 or 1,
			["_t0"] = 0,
			["_y0"] = 0,
			["_a0"] = 0,
			["_t1"] = 0,
			["_y1"] = 0,
			["_a1"] = 0
		}, v2)
	end,
	["__index"] = function(p3, p4)
		-- upvalues: (copy) v_u_28
		if v_u_28[p4] then
			return v_u_28[p4]
		end
		if p4 == "p" then
			local v5, _ = p3:_getstate(os.clock())
			return v5
		end
		if p4 == "v" then
			local _, v6 = p3:_getstate(os.clock())
			return v6
		end
		if p4 == "a" then
			return p3._accel
		end
		if p4 == "t" then
			return p3._y1
		end
		if p4 == "rtime" then
			local v7 = os.clock()
			return v7 < p3._t1 and p3._t1 - v7 or 0
		end
		error(("Bad index %q"):format((tostring(p4))))
	end,
	["__newindex"] = function(p8, p9, p10)
		if p9 == "p" then
			p8:_setstate(p10, nil, nil, nil)
			return
		elseif p9 == "v" then
			p8:_setstate(nil, p10, nil, nil)
			return
		elseif p9 == "a" then
			p8:_setstate(nil, nil, p10, nil)
			return
		elseif p9 == "t" then
			p8:_setstate(nil, nil, nil, p10)
			return
		elseif p9 == "pt" then
			p8:_setstate(p10, 0, nil, p10)
		else
			error(("Bad index %q"):format((tostring(p9))))
		end
	end,
	["_getstate"] = function(p11, p12)
		if p12 < (p11._t0 + p11._t1) / 2 then
			local v13 = p12 - p11._t0
			return p11._y0 + v13 * v13 / 2 * p11._a0, v13 * p11._a0
		end
		if p12 >= p11._t1 then
			return p11._y1, 0
		end
		local v14 = p12 - p11._t1
		return p11._y1 + v14 * v14 / 2 * p11._a1, v14 * p11._a1
	end,
	["_setstate"] = function(p15, p16, p17, p18, p19)
		local v20 = os.clock()
		local v21, v22 = p15:_getstate(v20)
		local v23 = p16 or v21
		local v24 = p17 or v22
		p15._accel = p18 or p15._accel
		local v25 = p19 or p15._y1
		if p15._accel * p15._accel < 1e-8 then
			p15._t0 = 0
			p15._y0 = v23
			p15._a0 = 0
			p15._t1 = (1 / 0)
			p15._y1 = v25
			p15._a1 = 0
		else
			local v26 = v25 < v23
			local v27 = v24 < 0
			if v26 and (v27 and v23 - v24 * v24 / (2 * p15._accel) < v25) or not v26 and (v27 or not v27 and v23 + v24 * v24 / (2 * p15._accel) < v25) then
				p15._a0 = p15._accel
				p15._t1 = v20 + ((2 * v24 * v24 + 4 * p15._accel * (v25 - v23)) ^ 0.5 - v24) / p15._accel
			else
				p15._a0 = -p15._accel
				p15._t1 = v20 + ((2 * v24 * v24 - 4 * p15._accel * (v25 - v23)) ^ 0.5 + v24) / p15._accel
			end
			p15._t0 = v20 - v24 / p15._a0
			p15._y0 = v23 - v24 * v24 / (2 * p15._a0)
			p15._y1 = v25
			p15._a1 = -p15._a0
		end
	end
}
return v_u_28
