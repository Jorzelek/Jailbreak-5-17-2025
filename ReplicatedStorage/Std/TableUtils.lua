-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 

-- Decompiled by Krnl

local v_u_1 = Random.new()
local v_u_6 = {
	["copyKeysSafe"] = function(p2, p3)
		for v4, v5 in pairs(p3) do
			if p2[v4] ~= nil then
				error(("Table `to` already has key `%s` = %s"):format(v4, p2[v4]), 2)
			end
			p2[v4] = v5
		end
		return p2
	end
}
local v_u_8 = {
	["__index"] = function(_, p7)
		error(("Table does not contain key `%s`"):format(p7), 2)
	end
}
function v_u_6.requireValidIndex(p9)
	-- upvalues: (copy) v_u_8
	if typeof(p9) == "table" then
		local v10 = v_u_8
		setmetatable(p9, v10)
	end
	return p9
end
function v_u_6.requireValidIndexAndFreeze(p11)
	-- upvalues: (copy) v_u_8
	local function v_u_16(p12)
		-- upvalues: (ref) v_u_8, (copy) v_u_16
		local v13 = typeof(p12) == "table"
		assert(v13, "currTable is not a table")
		local v14 = getmetatable(p12)
		if not v14 or v14 == v_u_8 then
			for _, v15 in p12 do
				if typeof(v15) == "table" then
					v_u_16(v15)
				end
			end
			if not table.isfrozen(p12) then
				table.freeze(p12)
			end
			return p12
		end
	end
	return v_u_16(p11)
end
function v_u_6.shuffleInPlace(p17)
	for v18 = #p17, 2, -1 do
		local v19 = math.random(v18)
		local v20 = p17[v19]
		local v21 = p17[v18]
		p17[v18] = v20
		p17[v19] = v21
	end
end
function v_u_6.filter(p22, p23)
	local v24 = {}
	for v25 = 1, #p22 do
		if p23(p22[v25]) then
			local v26 = p22[v25]
			table.insert(v24, v26)
		end
	end
	return v24
end
function v_u_6.map(p27, p28)
	local v29 = {}
	for v30 = 1, #p27 do
		local v31 = p27[v30]
		table.insert(v29, p28(v31))
	end
	return v29
end
function v_u_6.sum(p32)
	local v33 = 0
	for v34 = 1, #p32 do
		v33 = v33 + p32[v34]
	end
	return v33
end
function v_u_6.weightedRandom(p35, p36)
	-- upvalues: (copy) v_u_6, (copy) v_u_1
	local v37 = p36 or v_u_6.sum(p35)
	assert(v37)
	local v38 = v37 * v_u_1:NextNumber()
	for v39 = 1, #p35 do
		v38 = v38 - p35[v39]
		if v38 <= 0 then
			return v39
		end
	end
	error("Couldn\'t find value")
end
function v_u_6.hasDesiredValuesShallow(p40, p41)
	for v42, v43 in pairs(p41) do
		if p40[v42] ~= v43 then
			return false
		end
	end
	return true
end
function v_u_6.deepCompareTables(p44, p45, p46, p47)
	-- upvalues: (copy) v_u_6
	local v48 = typeof(p44) == "table"
	assert(v48, "t1 is not a table")
	local v49 = typeof(p45) == "table"
	assert(v49, "t2 is not a table")
	local v50 = 0
	local v51 = 0
	for _, _ in pairs(p45) do
		v50 = v50 + 1
	end
	for _, _ in pairs(p44) do
		v51 = v51 + 1
	end
	local v52 = v51 == #p44
	if v52 ~= (v50 == #p45) then
		return false
	end
	local v53 = not p46 or (p47 or not v52)
	local v54 = not p46
	if v53 and v51 ~= v50 then
		return false
	end
	if v52 then
		if v54 then
			for v55, v56 in pairs(p44) do
				local v57 = p45[v55]
				local v58 = not p46
				local v59
				if typeof(v56) == typeof(v57) then
					if typeof(v56) == "table" then
						v59 = v_u_6.deepCompareTables(v56, v57, p46, p47) and true or false
					else
						v59 = (not v58 or v56 == v57) and true or false
					end
				else
					v59 = false
				end
				if not v59 then
					return false
				end
			end
		end
		for _, v60 in pairs(p44) do
			local v61 = p45[1]
			local v62
			if typeof(v60) == typeof(v61) then
				v62 = (typeof(v60) ~= "table" or v_u_6.deepCompareTables(v60, v61, true, p47)) and true or false
			else
				v62 = false
			end
			if not v62 then
				return false
			end
		end
		for _, v63 in pairs(p45) do
			local v64 = p44[1]
			local v65
			if typeof(v63) == typeof(v64) then
				v65 = (typeof(v63) ~= "table" or v_u_6.deepCompareTables(v63, v64, true, p47)) and true or false
			else
				v65 = false
			end
			if not v65 then
				return false
			end
		end
	else
		for v66, v67 in pairs(p44) do
			if p45[v66] then
				local v68 = p45[v66]
				local v69 = not p46
				local v70
				if typeof(v67) == typeof(v68) then
					if typeof(v67) == "table" then
						v70 = v_u_6.deepCompareTables(v67, v68, p46, p47) and true or false
					else
						v70 = (not v69 or v67 == v68) and true or false
					end
				else
					v70 = false
				end
				if not v70 then
					return false
				end
			elseif v53 then
				return false
			end
		end
	end
	return true
end
function v_u_6.deepCheckSubset(p71, p72, p73)
	-- upvalues: (copy) v_u_6
	local v74 = typeof(p71) == "table"
	assert(v74, "t1 is not a table")
	local v75 = typeof(p72) == "table"
	assert(v75, "t2 is not a table")
	local v76 = 0
	local v77 = 0
	for _, _ in pairs(p72) do
		v76 = v76 + 1
	end
	for _, _ in pairs(p71) do
		v77 = v77 + 1
	end
	if v77 < v76 then
		return false
	end
	for v78, v79 in pairs(p72) do
		if not p71[v78] then
			return false
		end
		local v80 = typeof(v79)
		local v81 = p71[v78]
		if v80 ~= typeof(v81) then
			return false
		end
		if typeof(v79) == "table" then
			if not v_u_6.deepCheckSubset(v79, p71[v78], p73) then
				return false
			end
		elseif not p73 and v79 ~= p71[v78] then
			return false
		end
	end
	return true
end
function v_u_6.deepCopy(p82, p83)
	-- upvalues: (copy) v_u_6
	local v84 = p83 or {}
	assert(v84)
	if type(p82) ~= "table" then
		return p82
	end
	if v84[p82] then
		return v84[p82]
	end
	local v85 = {}
	v84[p82] = v85
	for v86, v87 in next, p82 do
		v85[v_u_6.deepCopy(v86, v84)] = v_u_6.deepCopy(v87, v84)
	end
	return v85
end
local function v_u_88(_, _)
	return true
end
local v_u_89 = {
	["boolean"] = "BoolValue",
	["table"] = "Folder",
	["Instance"] = "ObjectValue"
}
local v_u_98 = {
	["EnumItem"] = function(_, p90)
		local v91 = {
			["instanceType"] = "StringValue",
			["serializedValue"] = p90.Name
		}
		local v92 = {
			["_ValueType"] = "EnumItem"
		}
		local v93 = p90.EnumType
		v92._EnumType = tostring(v93)
		v91.attributes = v92
		return v91
	end,
	["Vector2"] = function(_, p94)
		local v95 = {
			["instanceType"] = "Vector3Value"
		}
		local v96 = p94.X
		local v97 = p94.Y
		v95.serializedValue = Vector3.new(v96, v97, 0)
		v95.attributes = {
			["_ValueType"] = "Vector2"
		}
		return v95
	end
}
local v_u_102 = {
	["EnumItem"] = function(p99)
		local v100 = p99:GetAttribute("_EnumType")
		return Enum[v100][p99.Value]
	end,
	["Vector2"] = function(p101)
		return Vector2.new(p101.Value.X, p101.Value.Y)
	end
}
local function v_u_111(p103, p104)
	-- upvalues: (copy) v_u_98, (copy) v_u_89
	local v105 = typeof(p104)
	if typeof(p103) ~= "number" and typeof(p103) ~= "string" then
		error("Cannot serialize non-string/number key")
	end
	local v106 = {
		["_KeyType"] = typeof(p103)
	}
	if v_u_98[v105] then
		local v107 = v_u_98[v105](p103, p104)
		for v108, v109 in v106 do
			v107.attributes[v108] = v109
		end
		return v107.instanceType, v107.serializedValue, v107.attributes
	else
		local v110 = (v_u_89[v105] or v105 .. "Value"):gsub("^%l", string.upper)
		v106._ValueType = v105
		return v110, p104, v106
	end
end
function v_u_6.observeObjectValuesChanged(p_u_112, p_u_113)
	-- upvalues: (copy) v_u_6
	local v114
	if p_u_112 then
		v114 = p_u_112:IsA("Instance")
	else
		v114 = p_u_112
	end
	assert(v114, "Invalid rootFolder passed")
	local function v115()
		-- upvalues: (ref) v_u_6, (copy) p_u_112, (copy) p_u_113
		p_u_113(v_u_6.createTableFromObjectValues(p_u_112), (p_u_112:GetAttribute("_TableUtilsLastUpdated")))
	end
	local v116 = p_u_112:GetAttributeChangedSignal("_TableUtilsLastUpdated"):Connect(v115)
	p_u_113(v_u_6.createTableFromObjectValues(p_u_112), (p_u_112:GetAttribute("_TableUtilsLastUpdated")))
	return v116
end
function v_u_6.createObjectValuesFromTable(p117, p118, p119)
	-- upvalues: (copy) v_u_88, (copy) v_u_111
	local v120 = typeof(p117) == "table"
	assert(v120, "Incorrect originalTable type passed")
	local v121 = typeof(p118) == "function" and true or p118 == nil
	assert(v121, "Incorrect filterPredicate type passed")
	local v122 = p119 == nil and true or p119:IsA("Instance")
	assert(v122, "Incorrect rootFolder type passed")
	local v_u_123 = p118 or v_u_88
	local v_u_124 = p119 or Instance.new("Folder")
	if not (v_u_124 and v_u_123) then
		error("no folder")
	end
	local function v_u_138(p125, p126)
		-- upvalues: (ref) v_u_123, (ref) v_u_111, (copy) v_u_138
		local v127 = {}
		for _, v128 in p126:GetChildren() do
			v127[v128.Name] = v128
		end
		for v129, v130 in p125 do
			if v_u_123(v129, v130) then
				local v131 = p126:FindFirstChild((tostring(v129)))
				local v132, v133, v134 = v_u_111(v129, v130)
				if v131 and v131.ClassName ~= v132 then
					v131:Destroy()
					v131 = nil
				end
				if v131 then
					v127[v131.Name] = nil
				else
					v131 = Instance.new(v132)
					v131.Name = tostring(v129)
				end
				if v132 ~= "Folder" then
					v131.Value = v133
				end
				for v135, v136 in v134 do
					v131:SetAttribute(v135, v136)
				end
				if typeof(v130) == "table" then
					v_u_138(v130, v131)
				end
				if not v131.Parent then
					v131.Parent = p126
				end
			end
		end
		for _, v137 in v127 do
			v137:Destroy()
		end
	end
	v_u_138(p117, v_u_124)
	task.delay(0, function()
		-- upvalues: (ref) v_u_124
		v_u_124:SetAttribute("_TableUtilsLastUpdated", workspace:GetServerTimeNow())
	end)
	return v_u_124
end
function v_u_6.createTableFromObjectValues(p139)
	-- upvalues: (copy) v_u_102
	local v140 = typeof(p139) == "Instance"
	assert(v140, "Invalid objectValues passed")
	local function v_u_147(p141)
		-- upvalues: (copy) v_u_147, (ref) v_u_102
		local v142 = {}
		for _, v143 in p141:GetChildren() do
			if v143:GetAttribute("_KeyType") == "number" then
				local v144 = v143.Name
				v145 = tonumber(v144)
				if v145 then
					goto l5
				end
			end
			local v145 = v143.Name
			::l5::
			if v143:IsA("Folder") then
				v142[v145] = v_u_147(v143)
			else
				local v146 = v143:GetAttribute("_ValueType")
				v142[v145] = v_u_102[v146] and v_u_102[v146](v143) or v143.Value
			end
		end
		return v142
	end
	return v_u_147(p139)
end
function v_u_6.isValidSequentialArray(p148)
	local v149 = 0
	for v150, _ in p148 do
		if typeof(v150) ~= "number" then
			return false
		end
		if v150 ~= v149 + 1 then
			return false
		end
		v149 = v150
	end
	return #p148 == v149
end
function v_u_6.insertDesc(p151, p152)
	local v153 = #p151 + 1
	for v154 = #p151, 1, -1 do
		if p152 < p151[v154] then
			break
		end
		v153 = v154
	end
	return v153
end
function v_u_6.insertAsc(p155, p156)
	local v157 = 0
	for v158 = 1, #p155 do
		if p156 < p155[v158] then
			break
		end
		v157 = v158
	end
	return v157 + 1
end
function v_u_6.concat(p159, p160)
	local v161 = table.create(#p159 + #p160)
	table.move(p159, 1, #p159, 1, v161)
	table.move(p160, 1, #p160, #p159 + 1, v161)
	return v161
end
function v_u_6.concatInPlace(p162, p163)
	table.move(p163, 1, #p163, #p162 + 1, p162)
end
function v_u_6.mergeDeepInPlace(p164, p165)
	-- upvalues: (copy) v_u_6
	local v166 = type(p164) == "table"
	assert(v166, "The \'from\' parameter must be a table.")
	local v167 = type(p165) == "table"
	assert(v167, "The \'to\' parameter must be a table.")
	for v168, v169 in p164 do
		if type(v169) == "table" then
			local v170 = p165[v168]
			if type(v170) == "table" then
				v_u_6.mergeDeepInPlace(v169, p165[v168])
			else
				p165[v168] = v169
			end
		else
			p165[v168] = v169
		end
	end
end
function v_u_6.deepFreeze(p171)
	-- upvalues: (copy) v_u_6
	if typeof(p171) == "table" then
		if not table.isfrozen(p171) then
			table.freeze(p171)
		end
		for _, v172 in p171 do
			v_u_6.deepFreeze(v172)
		end
	end
end
return v_u_6
