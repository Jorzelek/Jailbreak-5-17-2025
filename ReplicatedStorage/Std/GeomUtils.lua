-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 

-- Decompiled by Krnl

local v_u_290 = {
	["doesLineIntersectLine"] = function(p1, p2, p3, p4, p5, p6, p7, p8)
		if p1 == p3 and p2 == p4 or p5 == p7 and p6 == p8 then
			return false
		end
		local v9 = (p8 - p6) * (p3 - p1) - (p7 - p5) * (p4 - p2)
		if v9 == 0 then
			return false
		end
		local v10 = ((p7 - p5) * (p2 - p6) - (p8 - p6) * (p1 - p5)) / v9
		local v11 = ((p3 - p1) * (p2 - p6) - (p4 - p2) * (p1 - p5)) / v9
		return v10 >= 0 and (v10 <= 1 and (v11 >= 0 and v11 <= 1))
	end,
	["fasterComputeAABB"] = function(p12)
		local v13 = math.abs
		local v14 = (-1 / 0)
		local v15 = (1 / 0)
		local v16 = (1 / 0)
		local v17 = (1 / 0)
		local v18 = (-1 / 0)
		local v19 = (-1 / 0)
		for _, v20 in pairs(p12:GetDescendants()) do
			if v20:IsA("BasePart") then
				local v21 = v20.CFrame
				local v22 = v20.Size
				local v23 = v22.X
				local v24 = v22.Y
				local v25 = v22.Z
				local v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37 = v21:GetComponents()
				local v38 = 0.5 * (v13(v29) * v23 + v13(v30) * v24 + v13(v31) * v25)
				local v39 = 0.5 * (v13(v32) * v23 + v13(v33) * v24 + v13(v34) * v25)
				local v40 = 0.5 * (v13(v35) * v23 + v13(v36) * v24 + v13(v37) * v25)
				if v26 - v38 < v15 then
					v15 = v26 - v38
				end
				if v27 - v39 < v16 then
					v16 = v27 - v39
				end
				if v28 - v40 < v17 then
					v17 = v28 - v40
				end
				if v18 < v26 + v38 then
					v18 = v26 + v38
				end
				if v19 < v27 + v39 then
					v19 = v27 + v39
				end
				if v14 < v28 + v40 then
					v14 = v28 + v40
				end
			end
		end
		return Vector3.new(v15, v16, v17), Vector3.new(v18, v19, v14)
	end,
	["fasterComputeAABBPart"] = function(p41)
		-- upvalues: (copy) v_u_290
		return v_u_290.fasterComputeAABBCFSize(p41.CFrame, p41.Size)
	end,
	["fasterComputeAABBCFSize"] = function(p42, p43)
		local v44 = math.abs
		local v45 = (1 / 0)
		local v46 = (1 / 0)
		local v47 = (1 / 0)
		local v48 = (-1 / 0)
		local v49 = (-1 / 0)
		local v50 = (-1 / 0)
		local v51 = p43.X
		local v52 = p43.Y
		local v53 = p43.Z
		local v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65 = p42:GetComponents()
		local v66 = (v44(v57) * v51 + v44(v58) * v52 + v44(v59) * v53) * 0.5
		local v67 = (v44(v60) * v51 + v44(v61) * v52 + v44(v62) * v53) * 0.5
		local v68 = (v44(v63) * v51 + v44(v64) * v52 + v44(v65) * v53) * 0.5
		if v54 - v66 < v45 then
			v45 = v54 - v66
		end
		if v55 - v67 < v46 then
			v46 = v55 - v67
		end
		if v56 - v68 < v47 then
			v47 = v56 - v68
		end
		if v48 < v54 + v66 then
			v48 = v54 + v66
		end
		if v49 < v55 + v67 then
			v49 = v55 + v67
		end
		if v50 < v56 + v68 then
			v50 = v56 + v68
		end
		return Vector3.new(v45, v46, v47), Vector3.new(v48, v49, v50)
	end,
	["calcRayIntersectSphere"] = function(p69, p70, p71, p72)
		local v73 = (p70 - p69).Unit
		local v74 = p71 - p69
		local v75 = v74:Dot(v73)
		if v75 < 0 then
			return nil, nil
		else
			local v76 = v74:Dot(v74) - v75 ^ 2
			local v77 = math.sqrt(v76)
			if v77 < 0 then
				return nil, nil
			else
				local v78 = p72 ^ 2 - v77 ^ 2
				local v79 = math.sqrt(v78)
				local v80 = v75 - v79
				local v81 = v75 + v79
				local v82 = (p70 - p69).Magnitude
				if v81 <= v82 then
					return p69 + v73 * v80, p69 + v73 * v81
				elseif v80 <= v82 then
					return p69 + v73 * v80, nil
				else
					return nil, nil
				end
			end
		end
	end,
	["intersectRayPlane"] = function(p83, p84, p85, p86)
		local v87 = p86:Dot(p84)
		if math.abs(v87) >= 1e-6 then
			local v88 = p86:Dot(p85 - p83) / v87
			if v88 >= 0 then
				return p83 + p84 * v88
			end
		end
	end,
	["isPointInCylinder"] = function(p89, p90, p91, p92, p93)
		local v94 = p91.Unit
		local v95 = p89 - p90
		local v96 = v95:Dot(v94)
		if v96 < 0 or p92 < v96 then
			return false
		else
			return p93 >= (v95 - v94 * v96).Magnitude
		end
	end,
	["randomPointInCircle"] = function()
		local v97 = math.random()
		local v98 = math.sqrt(v97)
		local v99 = math.random() * 2 * 3.141592653589793
		return Vector2.new(v98 * math.cos(v99), v98 * math.sin(v99))
	end,
	["randomPointOnCircle"] = function()
		local v100 = math.random() * 2 * 3.141592653589793
		return Vector2.new(math.cos(v100), (math.sin(v100)))
	end,
	["randomPointInRing"] = function(p101)
		local v102 = math.random() * (1 - p101 ^ 2) + p101 ^ 2
		local v103 = math.sqrt(v102)
		local v104 = math.random() * 2 * 3.141592653589793
		return Vector2.new(v103 * math.cos(v104), v103 * math.sin(v104))
	end,
	["randomPointOnSphere"] = function()
		local v105 = math.random() * 3.141592653589793 * 2
		local v106 = math.random() * 2 - 1
		local v107 = 1 - v106 ^ 2
		local v108 = math.sqrt(v107) * math.cos(v105)
		local v109 = 1 - v106 ^ 2
		local v110 = math.sqrt(v109) * math.sin(v105)
		return Vector3.new(v108, v110, v106)
	end,
	["randomPointInSphere"] = function()
		local v111 = math.random()
		local v112 = math.random()
		local v113 = v111 * 2 * 3.141592653589793
		local v114 = 2 * v112 - 1
		local v115 = math.acos(v114)
		local v116 = math.random() ^ 0.3333333333333333
		local v117 = math.sin(v113)
		local v118 = math.cos(v113)
		local v119 = math.sin(v115)
		local v120 = math.cos(v115)
		local v121 = v116 * v119 * v118
		local v122 = v116 * v119 * v117
		local v123 = v116 * v120
		return Vector3.new(v121, v122, v123)
	end,
	["shortAngleDist"] = function(p124, p125)
		local v126 = p125 - p124
		local v127 = math.sign(v126)
		local v128 = p125 - p124
		local v129 = v127 * (math.abs(v128) % 6.283185307179586)
		return v127 * (math.abs(v129) * 2 % 6.283185307179586) - v129
	end,
	["waveTriangle"] = function(p130, p131, p132)
		local v133 = p131 or 1
		assert(v133)
		local v134 = p132 or 1
		assert(v134)
		local v135 = 4 * v133 / v134
		local v136 = p130 % v134 - v134 / 2
		return v135 * math.abs(v136) - v133
	end,
	["closestPointInPart"] = function(p137, p138)
		local v139 = p137.CFrame
		local v140 = v139:PointToObjectSpace(p138)
		local v141 = p137.Size.X * 0.5
		local v142 = p137.Size.Y * 0.5
		local v143 = p137.Size.Z * 0.5
		local v144 = v140.X
		local v145 = -v141
		local v146 = math.clamp(v144, v145, v141)
		local v147 = v140.Y
		local v148 = -v142
		local v149 = math.clamp(v147, v148, v142)
		local v150 = v140.Z
		local v151 = -v143
		local v152 = math.clamp(v150, v151, v143)
		return v139 * Vector3.new(v146, v149, v152)
	end,
	["closestPointOnPart"] = function(p153, p154)
		return p153:GetClosestPointOnSurface(p154)
	end,
	["closestPointOnLine"] = function(p155, p156, p157)
		local v158 = p156.Unit
		local v159 = v158:Dot(p157 - p155)
		local v160 = p156.Magnitude
		local v161 = p155 + v158 * math.clamp(v159, 0, v160)
		return v161, (p157 - v161).Magnitude
	end,
	["getSunflowerSeedArrangementGenerator"] = function(p_u_162, p163, p_u_164)
		local v165 = p163 * math.sqrt(p_u_162) + 0.5
		local v_u_166 = math.floor(v165)
		local v_u_167 = 0
		return function()
			-- upvalues: (ref) v_u_167, (copy) p_u_162, (copy) p_u_164, (copy) v_u_166
			if v_u_167 >= p_u_162 then
				return nil, nil
			end
			v_u_167 = v_u_167 + 1
			local v168 = p_u_164
			if v_u_167 <= p_u_162 - v_u_166 then
				local v169 = p_u_164
				local v170 = (1 - v_u_167 * 2) / (v_u_166 - p_u_162 * 2 + 1)
				v168 = v169 * math.sqrt(v170)
			end
			local v171 = 2.399963229728653 * v_u_167
			local v172 = math.cos(v171)
			local v173 = 2.399963229728653 * v_u_167
			local v174 = math.sin(v173)
			return Vector3.new(v172, 0, v174) * v168, v168
		end
	end,
	["getTrajectoryInterceptTime"] = function(p175, p176, p177, p178, p179)
		local v180 = p177.X
		local v181 = p177.Y
		local v182 = p177.Z
		local v183 = p179.X
		local v184 = p179.Y
		local v185 = p179.Z
		local v186 = p175.X
		local v187 = p175.Y
		local v188 = p175.Z
		local v189 = p176 * p176 - (v183 * v183 + v184 * v184 + v185 * v185) * p178 * p178
		local v190 = p178 * 4 * p178 * (v183 * (v186 - v180) + v184 * (v187 - v181) + v185 * (v188 - v182)) ^ 2 - ((v183 * v183 + v184 * v184 + v185 * v185) * p178 * p178 - p176 * p176) * 4 * ((v186 - v180) ^ 2 + (v187 - v181) ^ 2 + (v188 - v182) ^ 2)
		local v191 = math.sqrt(v190) * 0.5
		local v192 = v183 * v180 * p178 + v184 * v181 * p178 + v185 * v182 * p178 - v183 * v186 * p178 - v184 * v187 * p178 - v185 * v188 * p178
		local v193 = (v192 + v191) / v189
		local v194 = (v192 - v191) / v189
		if v193 ~= v193 or v193 <= 0 then
			v193 = nil
		end
		if v194 ~= v194 or v194 <= 0 then
			v194 = nil
		end
		if v193 and v194 then
			return math.min(v193, v194)
		else
			return v193 or v194
		end
	end,
	["offsetLookAtTarget"] = function(p195, p196, _, p197, p198, p199)
		if p199 == 0 then
			return 0, 0
		end
		local v200 = p197 * p197 + p199 * p199
		if p199 < 0 then
			local v201 = p197 / p199
			v217 = math.atan(v201)
			if v217 then
				::l5::
				if p195 * p195 < v200 then
					local v202 = p195 / v200 ^ 0.5
					v215 = math.asin(v202)
					if v215 then
						::l8::
						local v203 = v217 + v215
						local v204 = math.cos(v203)
						local v205 = math.sin(v203)
						local _ = p197 * v204 - p199 * v205
						local v206 = p199 * v204 + p197 * v205
						local v207 = p198 * p198 + v206 * v206
						if v206 < 0 then
							local v208 = -p198 / v206
							v213 = math.atan(v208)
							if v213 then
								::l11::
								if p196 * p196 < v207 then
									local v209 = p196 / v207 ^ 0.5
									v211 = math.asin(v209)
									if v211 then
										::l14::
										return v203, v213 - v211
									end
								end
								local v210 = v207 ^ 0.5 / p196
								local v211 = math.asin(v210)
								goto l14
							end
						end
						local v212 = p198 / v206
						local v213 = math.atan(v212)
						goto l11
					end
				end
				local v214 = v200 ^ 0.5 / p195
				local v215 = math.asin(v214)
				goto l8
			end
		end
		local v216 = -p197 / p199
		local v217 = 3.141592653589793 - math.atan(v216)
		goto l5
	end,
	["generate2DPointClockwiseComparisonFunction"] = function(p218)
		local v_u_219 = p218 or Vector2.zero
		local v220 = typeof(v_u_219) == "Vector2"
		assert(v220, "optionalCenter must be a Vector2")
		return function(p221, p222)
			-- upvalues: (copy) v_u_219
			local v223 = p221 - v_u_219
			local v224 = p222 - v_u_219
			if v223.X >= 0 and v224.X < 0 then
				return true
			elseif v223.X < 0 and v224.X >= 0 then
				return false
			else
				local v225 = v223.X
				if math.abs(v225) <= 0.001 then
					local v226 = v224.X
					if math.abs(v226) <= 0.001 then
						if v223.Y >= 0 or v224.Y >= 0 then
							return p221.Y > p222.Y
						else
							return p222.Y > p221.Y
						end
					end
				end
				local v227 = v223:Cross(v224)
				if v227 < 0 then
					return true
				elseif v227 > 0 then
					return false
				else
					return v223.Magnitude > v224.Magnitude
				end
			end
		end
	end,
	["yieldNPointsOnSphere"] = function(p_u_228)
		local v_u_229 = 2 / p_u_228
		local v_u_230 = 1
		return function()
			-- upvalues: (ref) v_u_230, (copy) p_u_228, (copy) v_u_229
			v_u_230 = v_u_230 + 1
			if v_u_230 <= p_u_228 then
				local v231 = v_u_230 * v_u_229 - 1 + v_u_229 / 2
				local v232 = v231 > 1 and 1 or v231
				local v233 = 1 - v232 * v232
				local v234 = math.sqrt(v233)
				local v235 = v_u_230 % p_u_228 * 2.399963229728653
				return math.cos(v235) * v234, v232, math.sin(v235) * v234, v_u_230
			end
		end
	end,
	["catmullRomSplinePoint"] = function(p236, p237, p238, p239, p240)
		local v241 = p240 * p240
		local v242 = v241 * p240
		local v243 = (-v242 + v241 * 2 - p240) * 0.5
		local v244 = (v242 * 3 - v241 * 5 + 2) * 0.5
		local v245 = (v242 * -3 + v241 * 4 + p240) * 0.5
		local v246 = (v242 - v241) * 0.5
		local v247 = v243 * p236.X + v244 * p237.X + v245 * p238.X + v246 * p239.X
		local v248 = v243 * p236.Y + v244 * p237.Y + v245 * p238.Y + v246 * p239.Y
		local v249 = v243 * p236.Z + v244 * p237.Z + v245 * p238.Z + v246 * p239.Z
		return Vector3.new(v247, v248, v249)
	end,
	["getNCatmullRomSplinePoints"] = function(p250, p251, p252, p253, p254)
		-- upvalues: (copy) v_u_290
		local v255 = p254 or 100
		assert(v255)
		local v256 = {}
		for v257 = 1, v255 do
			local v258 = (v257 - 1) / (v255 - 1)
			local v259 = v_u_290.catmullRomSplinePoint(p250, p251, p252, p253, v258)
			table.insert(v256, v259)
		end
		return v256
	end,
	["yieldNCatmullRomSplinePoints"] = function(p_u_260, p_u_261, p_u_262, p_u_263, p264)
		-- upvalues: (copy) v_u_290
		local v_u_265 = p264 or 100
		local v266 = v_u_265
		assert(v266)
		local v_u_267 = 1
		return function()
			-- upvalues: (ref) v_u_267, (ref) v_u_265, (ref) v_u_290, (copy) p_u_260, (copy) p_u_261, (copy) p_u_262, (copy) p_u_263
			if v_u_267 <= v_u_265 then
				local v268 = (v_u_267 - 1) / (v_u_265 - 1)
				local v269 = v_u_290.catmullRomSplinePoint(p_u_260, p_u_261, p_u_262, p_u_263, v268)
				v_u_267 = v_u_267 + 1
				return v269, v_u_267
			end
		end
	end,
	["stepAlongPath"] = function(p270, p271, p272, p273)
		while p273 > 0 do
			local v274 = p270[p271]:Lerp(p270[(p271 + 1 - 1) % #p270 + 1], p272)
			local v275 = p271 + 1 <= #p270 and (p271 + 1 or 1) or 1
			local v276 = (v274 - p270[v275]).Magnitude
			if p273 < v276 then
				p272 = p272 + p273 / v276 * (1 - p272)
				v275 = p271
				p273 = 0
			else
				p273 = p273 - v276
				p272 = 0
			end
			p271 = v275
		end
		return p271, p272
	end,
	["getDepthForWidth"] = function(p277, p278, p279)
		local v280 = p279.ViewportSize
		local v281 = v280.X / v280.Y
		local v282 = p279.FieldOfView
		local v283 = math.rad(v282) / 2
		local v284 = v281 * math.tan(v283)
		return 0.5 * v280.X * p277 / (p278 * v284)
	end,
	["transformRange"] = function(p285, p286, p287, p288, p289)
		return p288 + (p285 - p286) * (p289 - p288) / (p287 - p286)
	end
}
return v_u_290
