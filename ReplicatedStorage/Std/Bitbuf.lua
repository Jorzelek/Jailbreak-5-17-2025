-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 

-- Decompiled by Krnl

local v1 = {}
local v_u_2 = {
	["__index"] = {}
}
function v1.new(p3)
	-- upvalues: (copy) v_u_2
	local v4 = p3 == nil and true or type(p3) == "number"
	assert(v4, "number expected")
	local v5 = p3 or 0
	local v6 = {}
	local v7 = table.create
	local v8 = v5 / 32
	v6.buf = v7(math.ceil(v8), 0)
	v6.len = v5
	v6.i = 0
	local v9 = v_u_2
	return setmetatable(v6, v9)
end
function v1.fromString(p10)
	-- upvalues: (copy) v_u_2
	local v11 = type(p10) == "string"
	assert(v11, "string expected")
	local v12 = #p10 / 4
	local v13 = math.ceil(v12)
	local v14 = {
		["buf"] = table.create(v13, 0),
		["len"] = #p10 * 8,
		["i"] = 0
	}
	local v15 = #p10 / 4
	for v16 = 0, math.floor(v15) - 1 do
		local v17 = v16 * 4 + 1
		local v18 = v16 * 4 + 4
		local v19, v20, v21, v22 = string.byte(p10, v17, v18)
		local v23 = v14.buf
		local v24 = v16 + 1
		local v25 = v20 * 256
		local v26 = v21 * 65536
		local v27 = v22 * 16777216
		v23[v24] = bit32.bor(v19, v25, v26, v27)
	end
	for v28 = 0, #p10 % 4 - 1 do
		local v29 = v14.buf
		local v30 = v14.buf[v13]
		local v31 = (v13 - 1) * 4 + v28 + 1
		local v32 = string.byte(p10, v31) * 256 ^ v28
		v29[v13] = bit32.bor(v30, v32)
	end
	local v33 = v_u_2
	return setmetatable(v14, v33)
end
function v_u_2.__index.String(p34)
	local v35 = p34.len / 32
	local v36 = math.ceil(v35)
	local v37 = table.create(v36, "")
	for v38 in ipairs(v37) do
		local v39 = p34.buf[v38]
		if v39 then
			v37[v38] = string.pack("<I4", v39)
		else
			v37[v38] = "\0\0\0\0"
		end
	end
	local v40 = p34.len % 32
	if v40 > 0 then
		local v41 = p34.buf[v36] or 0
		local v42 = bit32.lshift(1, v40) - 1
		local v43 = bit32.band(v41, v42)
		local v44 = (p34.len - 1) / 8
		local v45 = math.floor(v44) % 4 + 1
		v37[v36] = string.pack("<I" .. v45, v43)
	end
	return table.concat(v37)
end
function v_u_2.__index.writeUnit(p46, p47, p48)
	local v49
	if p47 >= 0 then
		v49 = p47 <= 32
	else
		v49 = false
	end
	assert(v49, "size must be in range [0,32]")
	if p47 ~= 0 then
		local v50 = p46.i
		local v51 = bit32.rshift(v50, 5) + 1
		local v52 = p46.i % 32
		if v52 == 0 and p47 == 32 then
			p46.buf[v51] = bit32.band(p48, 4294967295)
		else
			local v53 = 32 - v52
			local v54 = p47 - v53
			if v54 <= 0 then
				local v55 = p46.buf
				local v56 = p46.buf[v51] or 0
				v55[v51] = bit32.replace(v56, p48, v52, p47)
			else
				local v57 = p46.buf
				local v58 = p46.buf[v51] or 0
				local v59 = bit32.extract(p48, 0, v53)
				v57[v51] = bit32.replace(v58, v59, v52, v53)
				local v60 = p46.buf
				local v61 = v51 + 1
				local v62 = p46.buf[v51 + 1] or 0
				local v63 = bit32.extract(p48, v53, v54)
				v60[v61] = bit32.replace(v62, v63, 0, v54)
			end
		end
		p46.i = p46.i + p47
		if p46.i > p46.len then
			p46.len = p46.i
		end
	end
end
function v_u_2.__index.readUnit(p64, p65)
	local v66
	if p65 >= 0 then
		v66 = p65 <= 32
	else
		v66 = false
	end
	assert(v66, "size must be in range [0,32]")
	if p65 == 0 then
		return 0
	end
	local v67 = p64.i
	local v68 = bit32.rshift(v67, 5) + 1
	local v69 = p64.i % 32
	p64.i = p64.i + p65
	if p64.i > p64.len then
		p64.len = p64.i
	end
	if v69 == 0 and p65 == 32 then
		return p64.buf[v68] or 0
	end
	local v70 = 32 - v69
	local v71 = v70 - p65
	if v71 >= 0 then
		local v72 = p64.buf[v68] or 0
		return bit32.extract(v72, v69, p65)
	end
	local v73 = p64.buf[v68] or 0
	local v74 = bit32.extract(v73, v69, v70)
	local v75 = p64.buf[v68 + 1] or 0
	local v76 = -v71
	local v77 = bit32.extract(v75, 0, v76)
	local v78 = bit32.lshift(v77, v70)
	return bit32.bor(v74, v78)
end
function v_u_2.__index.Len(p79)
	return p79.len
end
function v_u_2.__index.SetLen(p80, p81)
	local v82 = p81 < 0 and 0 or p81
	if v82 < p80.len then
		local v83 = v82 / 32
		local v84 = math.floor(v83) + 1
		if v82 % 32 == 0 then
			p80.buf[v84] = nil
		else
			local v85 = p80.buf
			local v86 = p80.buf[v84]
			local v87 = 2 ^ (v82 % 32) - 1
			v85[v84] = bit32.band(v86, v87)
		end
		local v88 = (p80.len - 1) / 32
		local v89 = math.floor(v88) + 1
		for v90 = v84 + 1, v89 do
			p80.buf[v90] = nil
		end
	end
	p80.len = v82
	if v82 < p80.i then
		p80.i = v82
	end
end
function v_u_2.__index.Index(p91)
	return p91.i
end
function v_u_2.__index.SetIndex(p92, p93)
	local v94 = p93 < 0 and 0 or p93
	p92.i = v94
	if p92.len < v94 then
		p92.len = v94
	end
end
function v_u_2.__index.Fits(p95, p96)
	local v97 = type(p96) == "number"
	assert(v97, "number expected")
	return p96 <= p95.len - p95.i
end
local function v_u_101(p98, p99)
	local v100 = p99 / 32
	for _ = 1, math.floor(v100) do
		p98:writeUnit(32, 0)
	end
	p98:writeUnit(p99 % 32, 0)
end
function v_u_2.__index.WritePad(p102, p103)
	-- upvalues: (copy) v_u_101
	local v104 = type(p103) == "number"
	assert(v104, "number expected")
	if p103 > 0 then
		v_u_101(p102, p103)
	end
end
function v_u_2.__index.ReadPad(p105, p106)
	local v107 = type(p106) == "number"
	assert(v107, "number expected")
	if p106 > 0 then
		p105.i = p105.i + p106
		if p105.i > p105.len then
			p105.len = p105.i
		end
	end
end
function v_u_2.__index.WriteAlign(p108, p109)
	-- upvalues: (copy) v_u_101
	local v110 = type(p109) == "number"
	assert(v110, "number expected")
	if p109 > 1 and p108.i % p109 ~= 0 then
		local v111 = p108.i / p109
		local v112 = math.ceil(v111) * p109 - p108.i
		v_u_101(p108, (math.floor(v112)))
	end
end
function v_u_2.__index.ReadAlign(p113, p114)
	local v115 = type(p114) == "number"
	assert(v115, "number expected")
	if p114 > 1 and p113.i % p114 ~= 0 then
		local v116 = p113.i / p114
		local v117 = math.ceil(v116) * p114 - p113.i
		local v118 = math.floor(v117)
		p113.i = p113.i + v118
		if p113.i > p113.len then
			p113.len = p113.i
		end
	end
end
function v_u_2.__index.Reset(p119)
	p119.i = 0
	p119.len = 0
	table.clear(p119.buf)
end
local function v_u_130(p120, p121)
	if #p121 <= 4 then
		p120:writeUnit(#p121 * 8, (string.unpack("<I" .. #p121, p121)))
	else
		local v122 = 3 - (p120.i / 8 - 1) % 4
		local v123 = math.floor(v122)
		if v123 > 0 then
			p120:writeUnit(v123 * 8, (string.unpack("<I" .. v123, p121)))
		end
		local v124 = (#p121 - v123) / 4
		local v125 = math.floor(v124)
		local v126 = p120.i
		local v127 = bit32.rshift(v126, 5) + 1
		for v128 = 0, v125 - 1 do
			p120.buf[v127 + v128] = string.unpack("<I4", p121, v123 + v128 * 4 + 1)
		end
		p120.i = p120.i + v125 * 32
		if p120.i > p120.len then
			p120.len = p120.i
		end
		local v129 = (#p121 - v123) % 4
		if v129 > 0 then
			p120:writeUnit(v129 * 8, string.unpack("<I" .. v129, p121, #p121 - v129 + 1))
		end
	end
end
function v_u_2.__index.WriteBytes(p131, p132)
	-- upvalues: (copy) v_u_130
	local v133 = type(p132) == "string"
	assert(v133, "string expected")
	if p132 == "" then
		return
	elseif p131.i % 8 == 0 then
		v_u_130(p131, p132)
	else
		for v134 = 1, #p132 do
			p131:writeUnit(8, string.byte(p132, v134))
		end
	end
end
local function v_u_148(p135, p136)
	if p136 <= 4 then
		return string.pack("<I" .. p136, p135:readUnit(p136 * 8))
	end
	local v137 = 3 - (p135.i / 8 - 1) % 4
	local v138 = math.floor(v137)
	local v139 = (p136 - v138) % 4
	local v140 = table.create((p136 - v138) / 4 + v139, nil)
	local v141 = 1
	if v138 > 0 then
		v140[v141] = string.pack("<I" .. v138, p135:readUnit(v138 * 8))
		v141 = v141 + 1
	end
	local v142 = (p136 - v138) / 4
	local v143 = math.floor(v142)
	local v144 = p135.i
	local v145 = bit32.rshift(v144, 5) + 1
	for v146 = 0, v143 - 1 do
		local v147 = p135.buf[v145 + v146]
		if v147 then
			v140[v141] = string.pack("<I4", v147)
		else
			v140[v141] = "\0\0\0\0"
		end
		v141 = v141 + 1
	end
	p135.i = p135.i + v143 * 32
	if p135.len < v141 then
		p135.len = v141
	end
	if v139 > 0 then
		v140[v141] = string.pack("<I" .. v139, p135:readUnit(v139 * 8))
	end
	return table.concat(v140)
end
function v_u_2.__index.ReadBytes(p149, p150)
	-- upvalues: (copy) v_u_148
	local v151 = type(p150) == "number"
	assert(v151, "number expected")
	if p150 == 0 then
		return ""
	end
	if p149.i % 8 == 0 then
		return v_u_148(p149, p150)
	end
	local v152 = table.create(p150, "")
	for v153 = 1, p150 do
		v152[v153] = string.char(p149:readUnit(8))
	end
	return table.concat(v152)
end
function v_u_2.__index.WriteUint(p154, p155, p156)
	local v157 = type(p155) == "number"
	assert(v157, "number expected")
	local v158 = type(p156) == "number"
	assert(v158, "number expected")
	local v159
	if p155 >= 0 then
		v159 = p155 <= 53
	else
		v159 = false
	end
	assert(v159, "size must be in range [0,53]")
	if p155 == 0 then
		return
	elseif p155 <= 32 then
		p154:writeUnit(p155, p156)
	else
		local v160 = p156 % 2 ^ p155
		p154:writeUnit(32, v160)
		local v161 = p155 - 32
		local v162 = v160 / 4294967296
		p154:writeUnit(v161, (math.floor(v162)))
	end
end
function v_u_2.__index.ReadUint(p163, p164)
	local v165 = type(p164) == "number"
	assert(v165, "number expected")
	local v166
	if p164 >= 0 then
		v166 = p164 <= 53
	else
		v166 = false
	end
	assert(v166, "size must be in range [0,53]")
	if p164 == 0 then
		return 0
	elseif p164 <= 32 then
		return p163:readUnit(p164)
	else
		return p163:readUnit(32) + p163:readUnit(p164 - 32) * 4294967296
	end
end
function v_u_2.__index.WriteBool(p167, p168)
	if p168 then
		p167:writeUnit(1, 1)
	else
		p167:writeUnit(1, 0)
	end
end
function v_u_2.__index.ReadBool(p169)
	return p169:readUnit(1) == 1
end
function v_u_2.__index.WriteByte(p170, p171)
	local v172 = type(p171) == "number"
	assert(v172, "number expected")
	p170:writeUnit(8, p171)
end
function v_u_2.__index.ReadByte(p173)
	return p173:readUnit(8)
end
function v_u_2.__index.WriteInt(p174, p175, p176)
	local v177 = type(p175) == "number"
	assert(v177, "number expected")
	local v178 = type(p176) == "number"
	assert(v178, "number expected")
	local v179
	if p175 >= 0 then
		v179 = p175 <= 53
	else
		v179 = false
	end
	assert(v179, "size must be in range [0,53]")
	if p175 == 0 then
		return
	else
		local v180 = p176 % 2 ^ p175
		if p175 <= 32 then
			p174:writeUnit(p175, v180)
		else
			p174:writeUnit(32, v180)
			local v181 = p175 - 32
			local v182 = v180 / 4294967296
			p174:writeUnit(v181, (math.floor(v182)))
		end
	end
end
function v_u_2.__index.ReadInt(p183, p184)
	local v185 = type(p184) == "number"
	assert(v185, "number expected")
	local v186
	if p184 >= 0 then
		v186 = p184 <= 53
	else
		v186 = false
	end
	assert(v186, "size must be in range [0,53]")
	if p184 == 0 then
		return 0
	else
		local v187
		if p184 <= 32 then
			v187 = p183:readUnit(p184)
		else
			v187 = p183:readUnit(32) + p183:readUnit(p184 - 32) * 4294967296
		end
		local v188 = 2 ^ p184
		local v189 = v187 % v188
		if v188 / 2 <= v189 then
			return v189 - v188
		else
			return v189
		end
	end
end
function v_u_2.__index.WriteFloat(p190, p191, p192)
	local v193 = type(p191) == "number"
	assert(v193, "number expected")
	local v194 = type(p192) == "number"
	assert(v194, "number expected")
	local v195 = p191 == 32 and true or p191 == 64
	assert(v195, "size must be 32 or 64")
	if p191 == 32 then
		p190:WriteBytes(string.pack("<f", p192))
	else
		p190:WriteBytes(string.pack("<d", p192))
	end
end
function v_u_2.__index.ReadFloat(p196, p197)
	local v198 = type(p197) == "number"
	assert(v198, "number expected")
	local v199 = p197 == 32 and true or p197 == 64
	assert(v199, "size must be 32 or 64")
	local v200 = p196:ReadBytes(p197 / 8)
	if p197 == 32 then
		return string.unpack("<f", v200)
	else
		return string.unpack("<d", v200)
	end
end
function v_u_2.__index.WriteUfixed(p201, p202, p203, p204)
	local v205 = type(p202) == "number"
	assert(v205, "number expected")
	local v206 = type(p203) == "number"
	assert(v206, "number expected")
	local v207 = p202 >= 0
	assert(v207, "integer size must be >= 0")
	local v208 = p203 >= 0
	assert(v208, "fractional size must be >= 0")
	local v209 = p202 + p203 <= 53
	assert(v209, "combined size must be <= 53")
	local v210 = type(p204) == "number"
	assert(v210, "number expected")
	local v211 = p202 + p203
	local v212 = p202 + p203
	local v213 = p204 * 2 ^ p203
	p201:WriteUint(v211, math.floor(v213) % 2 ^ v212)
end
function v_u_2.__index.ReadUfixed(p214, p215, p216)
	local v217 = type(p215) == "number"
	assert(v217, "number expected")
	local v218 = type(p216) == "number"
	assert(v218, "number expected")
	local v219 = p215 >= 0
	assert(v219, "integer size must be >= 0")
	local v220 = p216 >= 0
	assert(v220, "fractional size must be >= 0")
	local v221 = p215 + p216 <= 53
	assert(v221, "combined size must be <= 53")
	local v222 = p214:ReadUint(p215 + p216) % 2 ^ (p215 + p216)
	return math.floor(v222) * 2 ^ (-p216)
end
function v_u_2.__index.WriteFixed(p223, p224, p225, p226)
	local v227 = type(p224) == "number"
	assert(v227, "number expected")
	local v228 = type(p225) == "number"
	assert(v228, "number expected")
	local v229 = p224 >= 0
	assert(v229, "integer size must be >= 0")
	local v230 = p225 >= 0
	assert(v230, "fractional size must be >= 0")
	local v231 = p224 + p225 <= 53
	assert(v231, "combined size must be <= 53")
	local v232 = type(p226) == "number"
	assert(v232, "number expected")
	local v233 = p224 + p225
	local v234 = p224 + p225
	local v235 = p226 * 2 ^ p225
	local v236 = math.floor(v235)
	local v237 = 2 ^ v234
	local v238 = v236 % v237
	if v237 / 2 <= v238 then
		v238 = v238 - v237
	end
	p223:WriteInt(v233, v238)
end
function v_u_2.__index.ReadFixed(p239, p240, p241)
	local v242 = type(p240) == "number"
	assert(v242, "number expected")
	local v243 = type(p241) == "number"
	assert(v243, "number expected")
	local v244 = p240 >= 0
	assert(v244, "integer size must be >= 0")
	local v245 = p241 >= 0
	assert(v245, "fractional size must be >= 0")
	local v246 = p240 + p241 <= 53
	assert(v246, "combined size must be <= 53")
	local v247 = p239:ReadInt(p240 + p241)
	local v248 = 2 ^ (p240 + p241)
	local v249 = v247 % v248
	if v248 / 2 <= v249 then
		v249 = v249 - v248
	end
	return math.floor(v249) * 2 ^ (-p241)
end
function v1.isBuffer(p250)
	-- upvalues: (copy) v_u_2
	return getmetatable(p250) == v_u_2
end
return v1
