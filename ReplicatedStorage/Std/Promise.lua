-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- BgPJAQR0eXBlCGZ1bmN0aW9uBXRhYmxlDGdldG1ldGF0YWJsZQZfX2NhbGwGcmF3Z2V0CmlzQ2FsbGFibGUFZXJyb3IGc3RyaW5nBmZvcm1hdBAlcyBpcyBub3QgaW4gJXMhB19faW5kZXgqQ3JlYXRpbmcgbmV3IG1lbWJlcnMgaW4gJXMgaXMgbm90IGFsbG93ZWQhCl9fbmV3aW5kZXgGaXBhaXJzDHNldG1ldGF0YWJsZQhtYWtlRW51bQV0cmFjZQdjb250ZXh0BGtpbmQGcGFyZW50C2NyZWF0ZWRUaWNrDGNyZWF0ZWRUcmFjZR9bVGhpcyBlcnJvciBoYXMgbm8gZXJyb3IgdGV4dC5dCHRvc3RyaW5nAm9zBWNsb2NrBWRlYnVnCXRyYWNlYmFjawNuZXcGZXh0ZW5kAmlzM0FyZ3VtZW50ICMyIHRvIFByb21pc2UuRXJyb3IuaXNLaW5kIG11c3Qgbm90IGJlIG5pbAZhc3NlcnQGaXNLaW5kBmluc2VydA1nZXRFcnJvckNoYWluFy0tIFByb21pc2UuRXJyb3IoJXMpIC0tAT8GY29uY2F0AQoKX190b3N0cmluZwEjBnNlbGVjdARwYWNrCnBhY2tSZXN1bHQES2luZA5FeGVjdXRpb25FcnJvchVQcm9taXNlIGNyZWF0ZWQgYXQ6CgoQdHJhY2ViYWNrIGlzIG5pbBBtYWtlRXJyb3JIYW5kbGVyBnhwY2FsbAtydW5FeGVjdXRvcgZ1bnBhY2sOY3JlYXRlQWR2YW5jZXIEbmV4dAdpc0VtcHR5CF9yZXNvbHZlB3Jlc29sdmUHX3JlamVjdAZyZWplY3QHX3N0YXR1cwZTdGF0dXMJQ2FuY2VsbGVkEV9jYW5jZWxsYXRpb25Ib29rCG9uQ2FuY2VsB19zb3VyY2UzQXJndW1lbnQgIzIgdG8gUHJvbWlzZS5uZXcgbXVzdCBiZSBhIHByb21pc2Ugb3IgbmlsB190aHJlYWQHX3ZhbHVlcw1fdmFsdWVzTGVuZ3RoE191bmhhbmRsZWRSZWplY3Rpb24OX3F1ZXVlZFJlc29sdmUNX3F1ZXVlZFJlamVjdA5fcXVldWVkRmluYWxseQdfcGFyZW50Cl9jb25zdW1lcnMHU3RhcnRlZAljb3JvdXRpbmUGY3JlYXRlBHRhc2sFc3Bhd24EX25ldwtQcm9taXNlKCVzKQpEaXNjb25uZWN0Cl90aW1lRXZlbnQHQ29ubmVjdAVkZWZlcgRfdHJ5A3RyeQZjYW5jZWwKcmVzb2x2ZU9uZQdhbmRUaGVuJFBsZWFzZSBwYXNzIGEgbGlzdCBvZiBwcm9taXNlcyB0byAlcwtQcm9taXNlLmFsbAVwYWlycyxOb24tcHJvbWlzZSB2YWx1ZSBwYXNzZWQgaW50byAlcyBhdCBpbmRleCAlcwRfYWxsA2FsbDBCYWQgYXJndW1lbnQgIzEgdG8gUHJvbWlzZS5mb2xkOiBtdXN0IGJlIGEgdGFibGUzQmFkIGFyZ3VtZW50ICMyIHRvIFByb21pc2UuZm9sZDogbXVzdCBiZSBhIGZ1bmN0aW9uBGVhY2gEZm9sZAZudW1iZXIxQmFkIGFyZ3VtZW50ICMyIHRvIFByb21pc2Uuc29tZTogbXVzdCBiZSBhIG51bWJlcgRzb21lA2FueQdmaW5hbGx5ElByb21pc2UuYWxsU2V0dGxlZAphbGxTZXR0bGVkCGZpbmFsaXplDFByb21pc2UucmFjZQRyYWNlCWdldFN0YXR1cxRQcm9taXNlIGlzIGNhbmNlbGxlZBBBbHJlYWR5Q2FuY2VsbGVknAFUaGUgUHJvbWlzZSB0aGF0IHdhcyBwYXJ0IG9mIHRoZSBhcnJheSBhdCBpbmRleCAlZCBwYXNzZWQgaW50byBQcm9taXNlLmVhY2ggd2FzIGFscmVhZHkgY2FuY2VsbGVkIHdoZW4gUHJvbWlzZS5lYWNoIGJlZ2FuLgoKVGhhdCBQcm9taXNlIHdhcyBjcmVhdGVkIGF0OgoKJXMIUmVqZWN0ZWQFYXdhaXQMUHJvbWlzZS5lYWNoJVBsZWFzZSBwYXNzIGEgaGFuZGxlciBmdW5jdGlvbiB0byAlcyEJcHJvbWlzaWZ5CF9nZXRUaW1lB2VuZFRpbWUIcHJldmlvdXMJc3RhcnRUaW1lM0JhZCBhcmd1bWVudCAjMSB0byBQcm9taXNlLmRlbGF5LCBtdXN0IGJlIGEgbnVtYmVyLgVkZWxheQhUaW1lZE91dAlUaW1lZCBvdXQ5VGltZW91dCBvZiAlZCBzZWNvbmRzIGV4Y2VlZGVkLgo6dGltZW91dCgpIGNhbGxlZCBhdDoKCiVzB3RpbWVvdXQGcmVtb3ZlBGZpbmQIUmVzb2x2ZWQIX2FuZFRoZW4PUHJvbWlzZTphbmRUaGVuDVByb21pc2U6Y2F0Y2gFY2F0Y2gLUHJvbWlzZTp0YXADdGFwE1Byb21pc2U6YW5kVGhlbkNhbGwLYW5kVGhlbkNhbGwNYW5kVGhlblJldHVybgVjbG9zZRJfY29uc3VtZXJDYW5jZWxsZWQJX2ZpbmFsaXplCF9maW5hbGx5D1Byb21pc2U6ZmluYWxseRNQcm9taXNlOmZpbmFsbHlDYWxsC2ZpbmFsbHlDYWxsDWZpbmFsbHlSZXR1cm4HcnVubmluZwV5aWVsZAthd2FpdFN0YXR1cwthd2FpdEhlbHBlcihFeHBlY3RlZCBQcm9taXNlIHJlamVjdGVkIHdpdGggbm8gdmFsdWUuDGV4cGVjdEhlbHBlcgZleHBlY3QlUHJvbWlzZSBoYXMgbm90IHJlc29sdmVkIG9yIHJlamVjdGVkLgdfdW53cmFwBl9lcnJvcmlbTm8gc3RhY2sgdHJhY2UgYXZhaWxhYmxlIGFzIHRoaXMgUHJvbWlzZSBvcmlnaW5hdGVkIGZyb20gYW4gb2xkZXIgdmVyc2lvbiBvZiB0aGUgUHJvbWlzZSBsaWJyYXJ5ICg8IHYyKV0zVGhpcyBQcm9taXNlIHdhcyBjaGFpbmVkIHRvIGEgUHJvbWlzZSB0aGF0IGVycm9yZWQuAG1UaGUgUHJvbWlzZSBhdDoKCiVzCi4uLlJlamVjdGVkIGJlY2F1c2UgaXQgd2FzIGNoYWluZWQgdG8gdGhlIGZvbGxvd2luZyBQcm9taXNlLCB3aGljaCBlbmNvdW50ZXJlZCBhbiBlcnJvcjoKO1doZW4gcmV0dXJuaW5nIGEgUHJvbWlzZSBmcm9tIGFuZFRoZW4sIGV4dHJhIGFyZ3VtZW50cyBhcmUgE2Rpc2NhcmRlZCEgU2VlOgoKJXMEd2FybgR3cmFwBFdhaXQkVW5oYW5kbGVkIFByb21pc2UgcmVqZWN0aW9uOgoKJXMKCiVzHF91bmhhbmRsZWRSZWplY3Rpb25DYWxsYmFja3MEVEVTVBFOb3RSZXNvbHZlZEluVGltZTBUaGlzIFByb21pc2Ugd2FzIG5vdCByZXNvbHZlZCBpbiB0aW1lIGZvciA6bm93KCkXOm5vdygpIHdh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2QcLABIABQASAQP/wAgYABIABwDACRkA4gofADADCt4aAAAAUgsCAG8MIAD/DQAABAAAAG8OIQBvDyIAbxAjAG8RJADFDQ4FAQAAAJ8LAwIwCwrsGwAAAKQLJwAAmFCCMAsKLBwAAACkDCkAAACAQm8OKgC8DAwWKwAAAJ8MAwJNCwz9LAAAADALCtMdAAAA/wsAAAAAAAAwCwoPHgAAAP8LAAAAAAAAMAsKVC0AAABNCwpULQAAADALCm4MAAAAwAsuABIACgASAAAAEgAHADALCsIvAAAAwAswABIACgAwCwrvDQAAAMALMQAwCwoGFQAAAMALMgASAAoAEgAHADALCmgzAAAATQsKaDMAAAAwCwqVNAAAAMALNQASAAQAEgAKADALCh02AAAAwAs3ABIABAASAAoAMAsKeTgAAADACzkAEgAEABIACgAwCwrlOgAAAMALOwASAAoAMAsKsjwAAADACz0AEgAKADALCkQ+AAAAwAs/ABIACgAwCwq9QAAAAMALQQASAAoAMAsKKEIAAADAC0MAEgAKADALCj9EAAAAwAtFABIACgAwCwrORgAAAMALRwASAAoAMAsKjEgAAADAC0kAEgAKADALCmlKAAAA2QsdABIACgASAQP/MAsK6EsAAADAC0wAEgAKADALCgQPAAAAwAtNABIACgAwCwrtTgAAAMYLAADGDAAA2Q0gABIACgASAQz/EgEL/zANCr5PAAAAwQsAANkLIQASAAoAEgED/00MClQtAAAAMAsMclAAAADAC1EATQwKVC0AAAAwCwz9UgAAAMALUwASAAoAEgAHAE0MClQtAAAAMAsMQ1QAAADAC1UATQwKVC0AAAAwCwy1VgAAAMALVwBNDApULQAAADALDBlYAAAAwAtZABIACgASAAQATQwKVC0AAAAwCwybWgAAAMALWwASAAQATQwKVC0AAAAwCwyhXAAAAMALXQASAAQATQwKVC0AAAAwCwyFXgAAAMALXwASAAoATQwKVC0AAAAwCwyBYAAAAMALYQASAAoATQwKVC0AAAAwCwzzYgAAAMALYwASAAoATQwKVC0AAAAwCwySZAAAAMALZQBNDApULQAAADALDEJmAAAAwAtnABIABABNDApULQAAADALDO5oAAAAwAtpABIABABNDApULQAAADALDOdqAAAAwAtrABIACgBNDApULQAAADALDL1sAAAAwAttABIACgDADG4AEgALAE0NClQtAAAAMAwNDW8AAADADHAAEgAKAMANcQASAAwATQ4KVC0AAAAwDQ5hcgAAAE0NClQtAAAATQ8KVC0AAABNDg9hcgAAADAODdhzAAAAwA10ABIACgBNDgpULQAAADANDnJ1AAAA2Q01ABIACgASAQP/EgAEAE0OClQtAAAAMA0O3HYAAADADXcAEgAKABIABABNDgpULQAAADANDo54AAAAwA15ABIACgBNDgpULQAAADANDj56AAAA2Q04ABIACgASAQP/TQ4KVC0AAAAwDQ6aewAAAMANfAASAAoAMA0Kgn0AAADADX4AEgAKADANCo9/AAAAwA2AABIACgAwDQrfgQAAAMANggASAAoAMA0KsoMAAADBAwAAggoCAIQBA74BBQEAA78BBgAGAwMvBQEFA8ABAzADdAOvAQOBAQMMAx4GBQMgAyMDHwYIAyUGCQMqBgoGCwYQBhEDwQEDPwN7A1YDrQEFBRobHB0eA8IBA04DhwEDdgNAAxoDGwQAmFCCA8MBBAAAgEIDxAEDxQEDxgEDxwEGFgNTBhcGGAYbA1gDyAEGHQM7Bh8DPQYhA1kGIgNaBigDYgYpA2MGLQNnBi4DagYwA2sGNQNuBjoDcQNmBkAGQgN6A4ABA4QBBkkDcgZNA4gBBk4DXQZPA4sBBlIDjQEGVAOPAQZWA5ABBlcDWwZYA5IBBl4DlAEGXwNsBmEDlwEGYwOYAQZmA5sBBmcGaAN3BmkGagOfAQPJAQZrA6EBAzoGcAM8BnEDkwEDsgEGdQOzAQZ3A7YBBnwDvAEGfgO9AT0AAwQFBgcICQoLDQ4QERYXGBsdHyEiKCktLjA1Oj9AQkZISU1OT1JUVldYXl9hY2ZnaGlqa25wcXN1d3x+AQABAwAIAAAAAhIYzAEAAAABAQEAAAD8AAAAB/kCAAAADQAA8QAAAAYAAAD6AAAKAAAYB9cAFwAACAAM1QEAAQAAAAD+AAAAAAAAAAAAAAABAAAA/wAAAAAAAQD/AAIAAAABAP0AAgAAAAAA/gAAAAQAABbmAAAAEwAAAO0AAAAAEQAA7wALAAAAAB/WAAAJAAAAaY4AAB0AAAAhwgAAGAAAABbSAABOAAAAX1MAAABjAAAAnQAAABwBAgDhAAAAAIEAAH8AAAAYAAAA6AkAAAAAAAD3AAAAABsAAOUAFQAAAAAA6yMAAAAAAB6/AAAAABIAAO4AABwAAAAA5BAAAAAAAGWLAAAADgAAAPIAGgAAAAAA5gAAAAAAHADkAAAAAAAEAPwAAAAAAAUA+wAAAAAACQD3AAAACgAAAPYAAABHAAAAuQAANgAAAADKJQAAAAAAANsAAAAcAAAA5AAAADQAAADMAAEAAAA2AAAAAQAAAAcAAAAbAAAADgAAAC0AAABIAAAAAgAAAAEAAAABAAAAAQAAAAMAAAB5AAAAGgAAACsAAAARAAAAKgAAAHIAAAA+AAAALgAAAK0AAACUAAAAHwAAAIEAAAAYAAAATwAAABsAAAAVAAAAQQAAABIAAAAcAAAAdQAAAA4AAAAoAAAANQAAACUAAAAFAAAACQAAAAoAAABHAAAANgAAAFIAAABGAAAAQAAAAAB/G3iWuRqsz04pvPwt5oQQlWR9OF6rz5vBMSrd2Z4clAEqO0PfsseXIQ==

-- Decompiled by Krnl

local v_u_1 = {
	["__mode"] = "k"
}
local function v7(p_u_2, p3)
	local v4 = {}
	for _, v5 in ipairs(p3) do
		v4[v5] = v5
	end
	return setmetatable(v4, {
		["__index"] = function(_, p6)
			-- upvalues: (copy) p_u_2
			error(string.format("%s is not in %s!", p6, p_u_2), 2)
		end,
		["__newindex"] = function()
			-- upvalues: (copy) p_u_2
			error(string.format("Creating new members in %s is not allowed!", p_u_2), 2)
		end
	})
end
local v_u_8 = {
	["Kind"] = v7("Promise.Error.Kind", {
		"ExecutionError",
		"AlreadyCancelled",
		"NotResolvedInTime",
		"TimedOut"
	})
}
v_u_8.__index = v_u_8
function v_u_8.new(p9, p10)
	-- upvalues: (ref) v_u_8
	local v11 = p9 or {}
	local v12 = {}
	local v13 = v11.error
	v12.error = tostring(v13) or "[This error has no error text.]"
	v12.trace = v11.trace
	v12.context = v11.context
	v12.kind = v11.kind
	v12.parent = p10
	v12.createdTick = os.clock()
	v12.createdTrace = debug.traceback()
	local v14 = v_u_8
	return setmetatable(v12, v14)
end
function v_u_8.is(p15)
	if type(p15) == "table" then
		local v16 = getmetatable(p15)
		if type(v16) == "table" then
			local v17
			if rawget(p15, "error") == nil then
				v17 = false
			else
				local v18 = rawget(v16, "extend")
				v17 = type(v18) == "function"
			end
			return v17
		end
	end
	return false
end
function v_u_8.isKind(p19, p20)
	-- upvalues: (ref) v_u_8
	local v21 = p20 ~= nil
	assert(v21, "Argument #2 to Promise.Error.isKind must not be nil")
	local v22 = v_u_8.is(p19)
	if v22 then
		v22 = p19.kind == p20
	end
	return v22
end
function v_u_8.extend(p23, p24)
	-- upvalues: (ref) v_u_8
	local v25 = p24 or {}
	v25.kind = v25.kind or p23.kind
	return v_u_8.new(v25, p23)
end
function v_u_8.getErrorChain(p26)
	local v27 = { p26 }
	while v27[#v27].parent do
		local v28 = v27[#v27].parent
		table.insert(v27, v28)
	end
	return v27
end
function v_u_8.__tostring(p29)
	local v30 = { string.format("-- Promise.Error(%s) --", p29.kind or "?") }
	for _, v31 in ipairs(p29:getErrorChain()) do
		local v32 = table.concat
		local v33 = { v31.trace or v31.error, v31.context }
		table.insert(v30, v32(v33, "\n"))
	end
	return table.concat(v30, "\n")
end
local function v_u_34(...)
	return select("#", ...), { ... }
end
local function v_u_36(p35, ...)
	return p35, select("#", ...), { ... }
end
local function v_u_43(p_u_37, p38, ...)
	-- upvalues: (copy) v_u_36, (ref) v_u_8
	local v39 = v_u_36
	local v40 = xpcall
	local v41 = p_u_37 ~= nil
	assert(v41, "traceback is nil")
	return v39(v40(p38, function(p42)
		-- upvalues: (ref) v_u_8, (copy) p_u_37
		if type(p42) == "table" then
			return p42
		else
			return v_u_8.new({
				["error"] = p42,
				["kind"] = v_u_8.Kind.ExecutionError,
				["trace"] = debug.traceback(tostring(p42), 2),
				["context"] = "Promise created at:\n\n" .. p_u_37
			})
		end
	end, ...))
end
local v_u_44 = {
	["Error"] = v_u_8,
	["Status"] = v7("Promise.Status", {
		"Started",
		"Resolved",
		"Rejected",
		"Cancelled"
	}),
	["_getTime"] = os.clock,
	["_timeEvent"] = game:GetService("RunService").Heartbeat,
	["_unhandledRejectionCallbacks"] = {},
	["prototype"] = {}
}
v_u_44.__index = v_u_44.prototype
function v_u_44._new(p45, p_u_46, p47)
	-- upvalues: (copy) v_u_44, (copy) v_u_1, (copy) v_u_43
	if p47 ~= nil and not v_u_44.is(p47) then
		error("Argument #2 to Promise.new must be a promise or nil", 2)
	end
	local v_u_48 = {
		["_thread"] = nil,
		["_source"] = p45,
		["_status"] = v_u_44.Status.Started,
		["_values"] = nil,
		["_valuesLength"] = -1,
		["_unhandledRejection"] = true,
		["_queuedResolve"] = {},
		["_queuedReject"] = {},
		["_queuedFinally"] = {},
		["_cancellationHook"] = nil,
		["_parent"] = p47
	}
	local v49 = v_u_1
	v_u_48._consumers = setmetatable({}, v49)
	if p47 and p47._status == v_u_44.Status.Started then
		p47._consumers[v_u_48] = true
	end
	local v50 = v_u_44
	setmetatable(v_u_48, v50)
	local function v_u_51(...)
		-- upvalues: (copy) v_u_48
		v_u_48:_resolve(...)
	end
	local function v_u_52(...)
		-- upvalues: (copy) v_u_48
		v_u_48:_reject(...)
	end
	local function v_u_54(p53)
		-- upvalues: (copy) v_u_48, (ref) v_u_44
		if p53 then
			if v_u_48._status == v_u_44.Status.Cancelled then
				p53()
			else
				v_u_48._cancellationHook = p53
			end
		end
		return v_u_48._status == v_u_44.Status.Cancelled
	end
	v_u_48._thread = coroutine.create(function()
		-- upvalues: (ref) v_u_43, (copy) v_u_48, (copy) p_u_46, (copy) v_u_51, (copy) v_u_52, (copy) v_u_54
		local v55, _, v56 = v_u_43(v_u_48._source, p_u_46, v_u_51, v_u_52, v_u_54)
		if not v55 then
			v_u_52(v56[1])
		end
	end)
	task.spawn(v_u_48._thread)
	return v_u_48
end
function v_u_44.new(p57)
	-- upvalues: (copy) v_u_44
	return v_u_44._new(debug.traceback(nil, 2), p57)
end
function v_u_44.__tostring(p58)
	return string.format("Promise(%s)", p58._status)
end
function v_u_44.defer(p_u_59)
	-- upvalues: (copy) v_u_44, (copy) v_u_43
	local v_u_60 = debug.traceback(nil, 2)
	return v_u_44._new(v_u_60, function(p_u_61, p_u_62, p_u_63)
		-- upvalues: (ref) v_u_44, (ref) v_u_43, (copy) v_u_60, (copy) p_u_59
		local v_u_64 = nil
		v_u_64 = v_u_44._timeEvent:Connect(function()
			-- upvalues: (ref) v_u_64, (ref) v_u_43, (ref) v_u_60, (ref) p_u_59, (copy) p_u_61, (copy) p_u_62, (copy) p_u_63
			v_u_64:Disconnect()
			local v65, _, v66 = v_u_43(v_u_60, p_u_59, p_u_61, p_u_62, p_u_63)
			if not v65 then
				p_u_62(v66[1])
			end
		end)
	end)
end
v_u_44.async = v_u_44.defer
function v_u_44.resolve(...)
	-- upvalues: (copy) v_u_34, (copy) v_u_44
	local v_u_67, v_u_68 = v_u_34(...)
	return v_u_44._new(debug.traceback(nil, 2), function(p69)
		-- upvalues: (copy) v_u_68, (copy) v_u_67
		local v70 = v_u_68
		local v71 = v_u_67
		p69(unpack(v70, 1, v71))
	end)
end
function v_u_44.reject(...)
	-- upvalues: (copy) v_u_34, (copy) v_u_44
	local v_u_72, v_u_73 = v_u_34(...)
	return v_u_44._new(debug.traceback(nil, 2), function(_, p74)
		-- upvalues: (copy) v_u_73, (copy) v_u_72
		local v75 = v_u_73
		local v76 = v_u_72
		p74(unpack(v75, 1, v76))
	end)
end
function v_u_44._try(p77, p_u_78, ...)
	-- upvalues: (copy) v_u_34, (copy) v_u_44
	local v_u_79, v_u_80 = v_u_34(...)
	return v_u_44._new(p77, function(p81)
		-- upvalues: (copy) p_u_78, (copy) v_u_80, (copy) v_u_79
		local v82 = v_u_80
		local v83 = v_u_79
		p81(p_u_78(unpack(v82, 1, v83)))
	end)
end
function v_u_44.try(p84, ...)
	-- upvalues: (copy) v_u_44
	return v_u_44._try(debug.traceback(nil, 2), p84, ...)
end
function v_u_44._all(p85, p_u_86, p_u_87)
	-- upvalues: (copy) v_u_44
	if type(p_u_86) ~= "table" then
		error(string.format("Please pass a list of promises to %s", "Promise.all"), 3)
	end
	for v88, v89 in pairs(p_u_86) do
		if not v_u_44.is(v89) then
			error(string.format("Non-promise value passed into %s at index %s", "Promise.all", (tostring(v88))), 3)
		end
	end
	if #p_u_86 == 0 or p_u_87 == 0 then
		return v_u_44.resolve({})
	else
		return v_u_44._new(p85, function(p_u_90, p_u_91, p92)
			-- upvalues: (copy) p_u_87, (copy) p_u_86
			local v_u_93 = {}
			local v_u_94 = {}
			local v_u_95 = 0
			local v_u_96 = 0
			local v_u_97 = false
			local function v_u_100(p98, ...)
				-- upvalues: (ref) v_u_97, (ref) v_u_95, (ref) p_u_87, (copy) v_u_93, (ref) p_u_86, (copy) p_u_90, (copy) v_u_94
				if not v_u_97 then
					v_u_95 = v_u_95 + 1
					if p_u_87 == nil then
						v_u_93[p98] = ...
					else
						v_u_93[v_u_95] = ...
					end
					if v_u_95 >= (p_u_87 or #p_u_86) then
						v_u_97 = true
						p_u_90(v_u_93)
						for _, v99 in ipairs(v_u_94) do
							v99:cancel()
						end
					end
				end
			end
			p92(function()
				-- upvalues: (copy) v_u_94
				for _, v101 in ipairs(v_u_94) do
					v101:cancel()
				end
			end)
			local v_u_102 = v_u_97
			for v_u_103, v104 in ipairs(p_u_86) do
				v_u_94[v_u_103] = v104:andThen(function(...)
					-- upvalues: (copy) v_u_100, (copy) v_u_103
					v_u_100(v_u_103, ...)
				end, function(...)
					-- upvalues: (ref) v_u_96, (ref) p_u_87, (ref) p_u_86, (copy) v_u_94, (ref) v_u_102, (copy) p_u_91
					v_u_96 = v_u_96 + 1
					if p_u_87 == nil or #p_u_86 - v_u_96 < p_u_87 then
						for _, v105 in ipairs(v_u_94) do
							v105:cancel()
						end
						v_u_102 = true
						p_u_91(...)
					end
				end)
			end
			if v_u_102 then
				for _, v106 in ipairs(v_u_94) do
					v106:cancel()
				end
			end
		end)
	end
end
function v_u_44.all(p107)
	-- upvalues: (copy) v_u_44
	return v_u_44._all(debug.traceback(nil, 2), p107)
end
function v_u_44.fold(p108, p_u_109, p110)
	-- upvalues: (copy) v_u_44
	local v111 = type(p108) == "table"
	assert(v111, "Bad argument #1 to Promise.fold: must be a table")
	local v112
	if type(p_u_109) == "function" then
		v112 = true
	elseif type(p_u_109) == "table" then
		local v113 = getmetatable(p_u_109)
		if v113 then
			local v114 = rawget(v113, "__call")
			v112 = type(v114) == "function"
		else
			v112 = false
		end
	else
		v112 = false
	end
	assert(v112, "Bad argument #2 to Promise.fold: must be a function")
	local v_u_115 = v_u_44.resolve(p110)
	return v_u_44.each(p108, function(p_u_116, p_u_117)
		-- upvalues: (ref) v_u_115, (copy) p_u_109
		v_u_115 = v_u_115:andThen(function(p118)
			-- upvalues: (ref) p_u_109, (copy) p_u_116, (copy) p_u_117
			return p_u_109(p118, p_u_116, p_u_117)
		end)
	end):andThen(function()
		-- upvalues: (ref) v_u_115
		return v_u_115
	end)
end
function v_u_44.some(p119, p120)
	-- upvalues: (copy) v_u_44
	local v121 = type(p120) == "number"
	assert(v121, "Bad argument #2 to Promise.some: must be a number")
	return v_u_44._all(debug.traceback(nil, 2), p119, p120)
end
function v_u_44.any(p122)
	-- upvalues: (copy) v_u_44
	return v_u_44._all(debug.traceback(nil, 2), p122, 1):andThen(function(p123)
		return p123[1]
	end)
end
function v_u_44.allSettled(p_u_124)
	-- upvalues: (copy) v_u_44
	if type(p_u_124) ~= "table" then
		error(string.format("Please pass a list of promises to %s", "Promise.allSettled"), 2)
	end
	for v125, v126 in pairs(p_u_124) do
		if not v_u_44.is(v126) then
			error(string.format("Non-promise value passed into %s at index %s", "Promise.allSettled", (tostring(v125))), 2)
		end
	end
	if #p_u_124 == 0 then
		return v_u_44.resolve({})
	else
		return v_u_44._new(debug.traceback(nil, 2), function(p_u_127, _, p128)
			-- upvalues: (copy) p_u_124
			local v_u_129 = {}
			local v_u_130 = {}
			local v_u_131 = 0
			local function v_u_133(p132, ...)
				-- upvalues: (ref) v_u_131, (copy) v_u_129, (ref) p_u_124, (copy) p_u_127
				v_u_131 = v_u_131 + 1
				v_u_129[p132] = ...
				if v_u_131 >= #p_u_124 then
					p_u_127(v_u_129)
				end
			end
			p128(function()
				-- upvalues: (copy) v_u_130
				for _, v134 in ipairs(v_u_130) do
					v134:cancel()
				end
			end)
			for v_u_135, v136 in ipairs(p_u_124) do
				v_u_130[v_u_135] = v136:finally(function(...)
					-- upvalues: (copy) v_u_133, (copy) v_u_135
					v_u_133(v_u_135, ...)
				end)
			end
		end)
	end
end
function v_u_44.race(p_u_137)
	-- upvalues: (copy) v_u_44
	local v138 = type(p_u_137) == "table"
	local v139 = string.format
	assert(v138, v139("Please pass a list of promises to %s", "Promise.race"))
	for v140, v141 in pairs(p_u_137) do
		local v142 = v_u_44.is(v141)
		local v143 = string.format
		local v144 = tostring(v140)
		assert(v142, v143("Non-promise value passed into %s at index %s", "Promise.race", v144))
	end
	return v_u_44._new(debug.traceback(nil, 2), function(p_u_145, p_u_146, p147)
		-- upvalues: (copy) p_u_137
		local v_u_148 = {}
		local v_u_149 = false
		if not p147(function(...)
			-- upvalues: (copy) v_u_148, (ref) v_u_149, (copy) p_u_146
			for _, v150 in ipairs(v_u_148) do
				v150:cancel()
			end
			v_u_149 = true
			return p_u_146(...)
		end) then
			local v_u_151 = v_u_149
			for v152, v153 in ipairs(p_u_137) do
				v_u_148[v152] = v153:andThen(function(...)
					-- upvalues: (copy) v_u_148, (ref) v_u_151, (copy) p_u_145
					for _, v154 in ipairs(v_u_148) do
						v154:cancel()
					end
					v_u_151 = true
					return p_u_145(...)
				end, function(...)
					-- upvalues: (copy) v_u_148, (ref) v_u_151, (copy) p_u_146
					for _, v155 in ipairs(v_u_148) do
						v155:cancel()
					end
					v_u_151 = true
					return p_u_146(...)
				end)
			end
			if v_u_151 then
				for _, v156 in ipairs(v_u_148) do
					v156:cancel()
				end
			end
		end
	end)
end
function v_u_44.each(p_u_157, p_u_158)
	-- upvalues: (copy) v_u_44, (ref) v_u_8
	local v159 = type(p_u_157) == "table"
	local v160 = string.format
	assert(v159, v160("Please pass a list of promises to %s", "Promise.each"))
	local v161
	if type(p_u_158) == "function" then
		v161 = true
	elseif type(p_u_158) == "table" then
		local v162 = getmetatable(p_u_158)
		if v162 then
			local v163 = rawget(v162, "__call")
			v161 = type(v163) == "function"
		else
			v161 = false
		end
	else
		v161 = false
	end
	local v164 = string.format
	assert(v161, v164("Please pass a handler function to %s!", "Promise.each"))
	return v_u_44._new(debug.traceback(nil, 2), function(p165, p166, p167)
		-- upvalues: (copy) p_u_157, (ref) v_u_44, (ref) v_u_8, (copy) p_u_158
		local v168 = {}
		local v_u_169 = {}
		local v_u_170 = false
		p167(function()
			-- upvalues: (ref) v_u_170, (copy) v_u_169
			v_u_170 = true
			for _, v171 in ipairs(v_u_169) do
				v171:cancel()
			end
		end)
		local v172 = v_u_170
		local v173 = {}
		for v174, v175 in ipairs(p_u_157) do
			if v_u_44.is(v175) then
				if v175:getStatus() == v_u_44.Status.Cancelled then
					for _, v176 in ipairs(v_u_169) do
						v176:cancel()
					end
					return p166(v_u_8.new({
						["error"] = "Promise is cancelled",
						["kind"] = v_u_8.Kind.AlreadyCancelled,
						["context"] = string.format("The Promise that was part of the array at index %d passed into Promise.each was already cancelled when Promise.each began.\n\nThat Promise was created at:\n\n%s", v174, v175._source)
					}))
				end
				if v175:getStatus() == v_u_44.Status.Rejected then
					for _, v177 in ipairs(v_u_169) do
						v177:cancel()
					end
					return p166(select(2, v175:await()))
				end
				local v178 = v175:andThen(function(...)
					return ...
				end)
				table.insert(v_u_169, v178)
				v173[v174] = v178
			else
				v173[v174] = v175
			end
		end
		for v179, v182 in ipairs(v173) do
			if v_u_44.is(v182) then
				local v181, v182 = v182:await()
				if not v181 then
					for _, v183 in ipairs(v_u_169) do
						v183:cancel()
					end
					return p166(v182)
				end
			end
			if v172 then
				return
			end
			local v184 = v_u_44.resolve(p_u_158(v182, v179))
			table.insert(v_u_169, v184)
			local v185, v186 = v184:await()
			if not v185 then
				for _, v187 in ipairs(v_u_169) do
					v187:cancel()
				end
				return p166(v186)
			end
			v168[v179] = v186
		end
		p165(v168)
	end)
end
function v_u_44.is(p188)
	-- upvalues: (copy) v_u_44
	if type(p188) ~= "table" then
		return false
	end
	local v189 = getmetatable(p188)
	if v189 == v_u_44 then
		return true
	end
	if v189 ~= nil then
		if type(v189) == "table" then
			local v190 = rawget(v189, "__index")
			if type(v190) == "table" then
				local v191 = rawget(v189, "__index")
				local v192 = rawget(v191, "andThen")
				local v193
				if type(v192) == "function" then
					v193 = true
				else
					local v194 = type(v192) == "table" and getmetatable(v192)
					if v194 then
						local v195 = rawget(v194, "__call")
						v193 = type(v195) == "function"
					else
						v193 = false
					end
				end
				if v193 then
					return true
				end
			end
		end
		return false
	end
	local v196 = p188.andThen
	if type(v196) == "function" then
		return true
	end
	local v197 = type(v196) == "table" and getmetatable(v196)
	if v197 then
		local v198 = rawget(v197, "__call")
		if type(v198) == "function" then
			return true
		end
	end
	return false
end
function v_u_44.promisify(p_u_199)
	-- upvalues: (copy) v_u_44
	return function(...)
		-- upvalues: (ref) v_u_44, (copy) p_u_199
		return v_u_44._try(debug.traceback(nil, 2), p_u_199, ...)
	end
end
local v_u_200 = nil
local v_u_201 = nil
function v_u_44.delay(p202)
	-- upvalues: (copy) v_u_44, (ref) v_u_201, (ref) v_u_200
	local v203 = type(p202) == "number"
	assert(v203, "Bad argument #1 to Promise.delay, must be a number.")
	local v_u_204 = (p202 < 0.016666666666666666 or p202 == (1 / 0)) and 0.016666666666666666 or p202
	return v_u_44._new(debug.traceback(nil, 2), function(p205, _, p206)
		-- upvalues: (ref) v_u_44, (ref) v_u_204, (ref) v_u_201, (ref) v_u_200
		local v207 = v_u_44._getTime()
		local v208 = v207 + v_u_204
		local v_u_209 = {
			["resolve"] = p205,
			["startTime"] = v207,
			["endTime"] = v208
		}
		if v_u_201 == nil then
			v_u_200 = v_u_209
			v_u_201 = v_u_44._timeEvent:Connect(function()
				-- upvalues: (ref) v_u_44, (ref) v_u_200, (ref) v_u_201
				local v210 = v_u_44._getTime()
				while v_u_200 ~= nil and v_u_200.endTime < v210 do
					local v211 = v_u_200
					v_u_200 = v211.next
					if v_u_200 == nil then
						v_u_201:Disconnect()
						v_u_201 = nil
					else
						v_u_200.previous = nil
					end
					v211.resolve(v_u_44._getTime() - v211.startTime)
				end
			end)
		elseif v_u_200.endTime < v208 then
			local v212 = v_u_200
			local v213 = v212.next
			while v213 ~= nil and v213.endTime < v208 do
				local v214 = v213.next
				v212 = v213
				v213 = v214
			end
			v212.next = v_u_209
			v_u_209.previous = v212
			if v213 ~= nil then
				v_u_209.next = v213
				v213.previous = v_u_209
			end
		else
			v_u_209.next = v_u_200
			v_u_200.previous = v_u_209
			v_u_200 = v_u_209
		end
		p206(function()
			-- upvalues: (copy) v_u_209, (ref) v_u_200, (ref) v_u_201
			local v215 = v_u_209.next
			if v_u_200 == v_u_209 then
				if v215 == nil then
					v_u_201:Disconnect()
					v_u_201 = nil
				else
					v215.previous = nil
				end
				v_u_200 = v215
			else
				local v216 = v_u_209.previous
				v216.next = v215
				if v215 ~= nil then
					v215.previous = v216
				end
			end
		end)
	end)
end
local function v221(p217, p_u_218, p_u_219)
	-- upvalues: (copy) v_u_44, (ref) v_u_8
	local v_u_220 = debug.traceback(nil, 2)
	return v_u_44.race({ v_u_44.delay(p_u_218):andThen(function()
			-- upvalues: (ref) v_u_44, (copy) p_u_219, (ref) v_u_8, (copy) p_u_218, (copy) v_u_220
			return v_u_44.reject(p_u_219 == nil and v_u_8.new({
				["kind"] = v_u_8.Kind.TimedOut,
				["error"] = "Timed out",
				["context"] = string.format("Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s", p_u_218, v_u_220)
			}) or p_u_219)
		end), p217 })
end
v_u_44.prototype.timeout = v221
function v_u_44.prototype.getStatus(p222)
	return p222._status
end
function v_u_44.prototype._andThen(p_u_223, p_u_224, p_u_225, p_u_226)
	-- upvalues: (copy) v_u_44, (copy) v_u_43
	p_u_223._unhandledRejection = false
	if p_u_223._status ~= v_u_44.Status.Cancelled then
		return v_u_44._new(p_u_224, function(p_u_227, p_u_228, p229)
			-- upvalues: (copy) p_u_225, (copy) p_u_224, (ref) v_u_43, (copy) p_u_226, (copy) p_u_223, (ref) v_u_44
			local v_u_230
			if p_u_225 then
				local v_u_231 = p_u_224
				local v_u_232 = p_u_225
				v_u_230 = function(...)
					-- upvalues: (ref) v_u_43, (copy) v_u_231, (copy) v_u_232, (copy) p_u_227, (copy) p_u_228
					local v233, v234, v235 = v_u_43(v_u_231, v_u_232, ...)
					if v233 then
						p_u_227(unpack(v235, 1, v234))
					else
						p_u_228(v235[1])
					end
				end
			else
				v_u_230 = p_u_227
			end
			if p_u_226 then
				local v_u_236 = p_u_224
				local v_u_237 = p_u_226
				p_u_228 = function(...)
					-- upvalues: (ref) v_u_43, (copy) v_u_236, (copy) v_u_237, (copy) p_u_227, (copy) p_u_228
					local v238, v239, v240 = v_u_43(v_u_236, v_u_237, ...)
					if v238 then
						p_u_227(unpack(v240, 1, v239))
					else
						p_u_228(v240[1])
					end
				end
			end
			if p_u_223._status == v_u_44.Status.Started then
				local v241 = p_u_223._queuedResolve
				table.insert(v241, v_u_230)
				local v242 = p_u_223._queuedReject
				table.insert(v242, p_u_228)
				p229(function()
					-- upvalues: (ref) p_u_223, (ref) v_u_44, (ref) v_u_230, (ref) p_u_228
					if p_u_223._status == v_u_44.Status.Started then
						table.remove(p_u_223._queuedResolve, table.find(p_u_223._queuedResolve, v_u_230))
						table.remove(p_u_223._queuedReject, table.find(p_u_223._queuedReject, p_u_228))
					end
				end)
			elseif p_u_223._status == v_u_44.Status.Resolved then
				local v243 = p_u_223._values
				local v244 = p_u_223._valuesLength
				v_u_230(unpack(v243, 1, v244))
			elseif p_u_223._status == v_u_44.Status.Rejected then
				local v245 = p_u_223._values
				local v246 = p_u_223._valuesLength
				p_u_228(unpack(v245, 1, v246))
			end
		end, p_u_223)
	end
	local v247 = v_u_44.new(function() end)
	v247:cancel()
	return v247
end
function v_u_44.prototype.andThen(p248, p249, p250)
	local v251
	if p249 == nil or type(p249) == "function" then
		v251 = true
	elseif type(p249) == "table" then
		local v252 = getmetatable(p249)
		if v252 then
			local v253 = rawget(v252, "__call")
			v251 = type(v253) == "function"
		else
			v251 = false
		end
	else
		v251 = false
	end
	local v254 = string.format
	assert(v251, v254("Please pass a handler function to %s!", "Promise:andThen"))
	local v255
	if p250 == nil or type(p250) == "function" then
		v255 = true
	elseif type(p250) == "table" then
		local v256 = getmetatable(p250)
		if v256 then
			local v257 = rawget(v256, "__call")
			v255 = type(v257) == "function"
		else
			v255 = false
		end
	else
		v255 = false
	end
	local v258 = string.format
	assert(v255, v258("Please pass a handler function to %s!", "Promise:andThen"))
	return p248:_andThen(debug.traceback(nil, 2), p249, p250)
end
function v_u_44.prototype.catch(p259, p260)
	local v261
	if p260 == nil or type(p260) == "function" then
		v261 = true
	elseif type(p260) == "table" then
		local v262 = getmetatable(p260)
		if v262 then
			local v263 = rawget(v262, "__call")
			v261 = type(v263) == "function"
		else
			v261 = false
		end
	else
		v261 = false
	end
	local v264 = string.format
	assert(v261, v264("Please pass a handler function to %s!", "Promise:catch"))
	return p259:_andThen(debug.traceback(nil, 2), nil, p260)
end
function v_u_44.prototype.tap(p265, p_u_266)
	-- upvalues: (copy) v_u_44, (copy) v_u_34
	local v267
	if type(p_u_266) == "function" then
		v267 = true
	elseif type(p_u_266) == "table" then
		local v268 = getmetatable(p_u_266)
		if v268 then
			local v269 = rawget(v268, "__call")
			v267 = type(v269) == "function"
		else
			v267 = false
		end
	else
		v267 = false
	end
	local v270 = string.format
	assert(v267, v270("Please pass a handler function to %s!", "Promise:tap"))
	return p265:_andThen(debug.traceback(nil, 2), function(...)
		-- upvalues: (copy) p_u_266, (ref) v_u_44, (ref) v_u_34
		local v271 = p_u_266(...)
		if not v_u_44.is(v271) then
			return ...
		end
		local v_u_272, v_u_273 = v_u_34(...)
		return v271:andThen(function()
			-- upvalues: (copy) v_u_273, (copy) v_u_272
			local v274 = v_u_273
			local v275 = v_u_272
			return unpack(v274, 1, v275)
		end)
	end)
end
function v_u_44.prototype.andThenCall(p276, p_u_277, ...)
	-- upvalues: (copy) v_u_34
	local v278
	if type(p_u_277) == "function" then
		v278 = true
	elseif type(p_u_277) == "table" then
		local v279 = getmetatable(p_u_277)
		if v279 then
			local v280 = rawget(v279, "__call")
			v278 = type(v280) == "function"
		else
			v278 = false
		end
	else
		v278 = false
	end
	local v281 = string.format
	assert(v278, v281("Please pass a handler function to %s!", "Promise:andThenCall"))
	local v_u_282, v_u_283 = v_u_34(...)
	return p276:_andThen(debug.traceback(nil, 2), function()
		-- upvalues: (copy) p_u_277, (copy) v_u_283, (copy) v_u_282
		local v284 = v_u_283
		local v285 = v_u_282
		return p_u_277(unpack(v284, 1, v285))
	end)
end
function v_u_44.prototype.andThenReturn(p286, ...)
	-- upvalues: (copy) v_u_34
	local v_u_287, v_u_288 = v_u_34(...)
	return p286:_andThen(debug.traceback(nil, 2), function()
		-- upvalues: (copy) v_u_288, (copy) v_u_287
		local v289 = v_u_288
		local v290 = v_u_287
		return unpack(v289, 1, v290)
	end)
end
function v_u_44.prototype.cancel(p291)
	-- upvalues: (copy) v_u_44
	if p291._status == v_u_44.Status.Started then
		p291._status = v_u_44.Status.Cancelled
		if p291._cancellationHook then
			p291._cancellationHook()
		end
		coroutine.close(p291._thread)
		if p291._parent then
			p291._parent:_consumerCancelled(p291)
		end
		for v292 in pairs(p291._consumers) do
			v292:cancel()
		end
		p291:_finalize()
	end
end
function v_u_44.prototype._consumerCancelled(p293, p294)
	-- upvalues: (copy) v_u_44
	if p293._status == v_u_44.Status.Started then
		p293._consumers[p294] = nil
		if next(p293._consumers) == nil then
			p293:cancel()
		end
	end
end
function v_u_44.prototype._finally(p_u_295, p296, p_u_297)
	-- upvalues: (copy) v_u_44
	p_u_295._unhandledRejection = false
	return v_u_44._new(p296, function(p_u_298, p_u_299, p300)
		-- upvalues: (copy) p_u_295, (copy) p_u_297, (ref) v_u_44
		local v_u_301 = nil
		p300(function()
			-- upvalues: (ref) p_u_295, (ref) v_u_301
			p_u_295:_consumerCancelled(p_u_295)
			if v_u_301 then
				v_u_301:cancel()
			end
		end)
		local v304 = p_u_297 and function(...)
			-- upvalues: (ref) p_u_297, (ref) v_u_44, (ref) v_u_301, (copy) p_u_298, (ref) p_u_295, (copy) p_u_299
			local v302 = p_u_297(...)
			if v_u_44.is(v302) then
				v_u_301 = v302
				v302:finally(function(p303)
					-- upvalues: (ref) v_u_44, (ref) p_u_298, (ref) p_u_295
					if p303 ~= v_u_44.Status.Rejected then
						p_u_298(p_u_295)
					end
				end):catch(function(...)
					-- upvalues: (ref) p_u_299
					p_u_299(...)
				end)
			else
				p_u_298(p_u_295)
			end
		end or p_u_298
		if p_u_295._status == v_u_44.Status.Started then
			local v305 = p_u_295._queuedFinally
			table.insert(v305, v304)
		else
			v304(p_u_295._status)
		end
	end)
end
function v_u_44.prototype.finally(p306, p307)
	local v308
	if p307 == nil or type(p307) == "function" then
		v308 = true
	elseif type(p307) == "table" then
		local v309 = getmetatable(p307)
		if v309 then
			local v310 = rawget(v309, "__call")
			v308 = type(v310) == "function"
		else
			v308 = false
		end
	else
		v308 = false
	end
	local v311 = string.format
	assert(v308, v311("Please pass a handler function to %s!", "Promise:finally"))
	return p306:_finally(debug.traceback(nil, 2), p307)
end
function v_u_44.prototype.finallyCall(p312, p_u_313, ...)
	-- upvalues: (copy) v_u_34
	local v314
	if type(p_u_313) == "function" then
		v314 = true
	elseif type(p_u_313) == "table" then
		local v315 = getmetatable(p_u_313)
		if v315 then
			local v316 = rawget(v315, "__call")
			v314 = type(v316) == "function"
		else
			v314 = false
		end
	else
		v314 = false
	end
	local v317 = string.format
	assert(v314, v317("Please pass a handler function to %s!", "Promise:finallyCall"))
	local v_u_318, v_u_319 = v_u_34(...)
	return p312:_finally(debug.traceback(nil, 2), function()
		-- upvalues: (copy) p_u_313, (copy) v_u_319, (copy) v_u_318
		local v320 = v_u_319
		local v321 = v_u_318
		return p_u_313(unpack(v320, 1, v321))
	end)
end
function v_u_44.prototype.finallyReturn(p322, ...)
	-- upvalues: (copy) v_u_34
	local v_u_323, v_u_324 = v_u_34(...)
	return p322:_finally(debug.traceback(nil, 2), function()
		-- upvalues: (copy) v_u_324, (copy) v_u_323
		local v325 = v_u_324
		local v326 = v_u_323
		return unpack(v325, 1, v326)
	end)
end
function v_u_44.prototype.awaitStatus(p327)
	-- upvalues: (copy) v_u_44
	p327._unhandledRejection = false
	if p327._status == v_u_44.Status.Started then
		local v_u_328 = coroutine.running()
		p327:finally(function()
			-- upvalues: (copy) v_u_328
			task.spawn(v_u_328)
		end):catch(function() end)
		coroutine.yield()
	end
	if p327._status == v_u_44.Status.Resolved then
		local v329 = p327._status
		local v330 = p327._values
		local v331 = p327._valuesLength
		return v329, unpack(v330, 1, v331)
	end
	if p327._status ~= v_u_44.Status.Rejected then
		return p327._status
	end
	local v332 = p327._status
	local v333 = p327._values
	local v334 = p327._valuesLength
	return v332, unpack(v333, 1, v334)
end
local function v_u_336(p335, ...)
	-- upvalues: (copy) v_u_44
	return p335 == v_u_44.Status.Resolved, ...
end
function v_u_44.prototype.await(p337)
	-- upvalues: (copy) v_u_336
	return v_u_336(p337:awaitStatus())
end
local function v_u_339(p338, ...)
	-- upvalues: (copy) v_u_44
	if p338 ~= v_u_44.Status.Resolved then
		error(... == nil and "Expected Promise rejected with no value." or ..., 3)
	end
	return ...
end
function v_u_44.prototype.expect(p340)
	-- upvalues: (copy) v_u_339
	return v_u_339(p340:awaitStatus())
end
v_u_44.prototype.awaitValue = v_u_44.prototype.expect
function v_u_44.prototype._unwrap(p341)
	-- upvalues: (copy) v_u_44
	if p341._status == v_u_44.Status.Started then
		error("Promise has not resolved or rejected.", 2)
	end
	local v342 = p341._status == v_u_44.Status.Resolved
	local v343 = p341._values
	local v344 = p341._valuesLength
	return v342, unpack(v343, 1, v344)
end
local function v353(p_u_345, ...)
	-- upvalues: (copy) v_u_44, (ref) v_u_8, (copy) v_u_34
	if p_u_345._status == v_u_44.Status.Started then
		if v_u_44.is((...)) then
			if select("#", ...) > 1 then
				local v346 = string.format("When returning a Promise from andThen, extra arguments are discarded! See:\n\n%s", p_u_345._source)
				warn(v346)
			end
			local v_u_347 = ...
			local v349 = v_u_347:andThen(function(...)
				-- upvalues: (copy) p_u_345
				p_u_345:_resolve(...)
			end, function(...)
				-- upvalues: (copy) v_u_347, (ref) v_u_8, (copy) p_u_345
				local v348 = v_u_347._values[1]
				if v_u_347._error then
					v348 = v_u_8.new({
						["error"] = v_u_347._error,
						["kind"] = v_u_8.Kind.ExecutionError,
						["context"] = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]"
					})
				end
				if v_u_8.isKind(v348, v_u_8.Kind.ExecutionError) then
					return p_u_345:_reject(v348:extend({
						["error"] = "This Promise was chained to a Promise that errored.",
						["trace"] = "",
						["context"] = string.format("The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n", p_u_345._source)
					}))
				end
				p_u_345:_reject(...)
			end)
			if v349._status == v_u_44.Status.Cancelled then
				p_u_345:cancel()
			elseif v349._status == v_u_44.Status.Started then
				p_u_345._parent = v349
				v349._consumers[p_u_345] = true
			end
		else
			p_u_345._status = v_u_44.Status.Resolved
			local v350, v351 = v_u_34(...)
			p_u_345._valuesLength = v350
			p_u_345._values = v351
			for _, v352 in ipairs(p_u_345._queuedResolve) do
				coroutine.wrap(v352)(...)
			end
			p_u_345:_finalize()
			return
		end
	else
		if v_u_44.is((...)) then
			(...):_consumerCancelled(p_u_345)
		end
		return
	end
end
v_u_44.prototype._resolve = v353
function v_u_44.prototype._reject(p_u_354, ...)
	-- upvalues: (copy) v_u_44, (copy) v_u_34
	if p_u_354._status == v_u_44.Status.Started then
		p_u_354._status = v_u_44.Status.Rejected
		local v355, v356 = v_u_34(...)
		p_u_354._valuesLength = v355
		p_u_354._values = v356
		local v357 = p_u_354._queuedReject
		if next(v357) == nil then
			local v_u_358 = tostring((...))
			coroutine.wrap(function()
				-- upvalues: (ref) v_u_44, (copy) p_u_354, (copy) v_u_358
				v_u_44._timeEvent:Wait()
				if p_u_354._unhandledRejection then
					local v359 = string.format("Unhandled Promise rejection:\n\n%s\n\n%s", v_u_358, p_u_354._source)
					for _, v360 in ipairs(v_u_44._unhandledRejectionCallbacks) do
						local v361 = task.spawn
						local v362 = p_u_354
						local v363 = p_u_354._values
						local v364 = p_u_354._valuesLength
						v361(v360, v362, unpack(v363, 1, v364))
					end
					if not v_u_44.TEST then
						warn(v359)
					end
				else
					return
				end
			end)()
		else
			for _, v365 in ipairs(p_u_354._queuedReject) do
				coroutine.wrap(v365)(...)
			end
		end
		p_u_354:_finalize()
	end
end
function v_u_44.prototype._finalize(p366)
	-- upvalues: (copy) v_u_44
	for _, v367 in ipairs(p366._queuedFinally) do
		coroutine.wrap(v367)(p366._status)
	end
	p366._queuedFinally = nil
	p366._queuedReject = nil
	p366._queuedResolve = nil
	if not v_u_44.TEST then
		p366._parent = nil
		p366._consumers = nil
	end
	task.defer(coroutine.close, p366._thread)
end
local function v372(p368, p369)
	-- upvalues: (copy) v_u_44, (ref) v_u_8
	local v370 = debug.traceback(nil, 2)
	if p368._status == v_u_44.Status.Resolved then
		return p368:_andThen(v370, function(...)
			return ...
		end)
	end
	local v371 = v_u_44.reject
	if p369 == nil then
		p369 = v_u_8.new({
			["kind"] = v_u_8.Kind.NotResolvedInTime,
			["error"] = "This Promise was not resolved in time for :now()",
			["context"] = ":now() was called at:\n\n" .. v370
		}) or p369
	end
	return v371(p369)
end
v_u_44.prototype.now = v372
function v_u_44.retry(p_u_373, p_u_374, ...)
	-- upvalues: (copy) v_u_44
	local v375
	if type(p_u_373) == "function" then
		v375 = true
	elseif type(p_u_373) == "table" then
		local v376 = getmetatable(p_u_373)
		if v376 then
			local v377 = rawget(v376, "__call")
			v375 = type(v377) == "function"
		else
			v375 = false
		end
	else
		v375 = false
	end
	assert(v375, "Parameter #1 to Promise.retry must be a function")
	local v378 = type(p_u_374) == "number"
	assert(v378, "Parameter #2 to Promise.retry must be a number")
	local v_u_379 = { ... }
	local v_u_380 = select("#", ...)
	return v_u_44.resolve(p_u_373(...)):catch(function(...)
		-- upvalues: (copy) p_u_374, (ref) v_u_44, (copy) p_u_373, (copy) v_u_379, (copy) v_u_380
		if p_u_374 <= 0 then
			return v_u_44.reject(...)
		end
		local v381 = v_u_379
		local v382 = v_u_380
		return v_u_44.retry(p_u_373, p_u_374 - 1, unpack(v381, 1, v382))
	end)
end
function v_u_44.retryWithDelay(p_u_383, p_u_384, p_u_385, ...)
	-- upvalues: (copy) v_u_44
	local v386
	if type(p_u_383) == "function" then
		v386 = true
	elseif type(p_u_383) == "table" then
		local v387 = getmetatable(p_u_383)
		if v387 then
			local v388 = rawget(v387, "__call")
			v386 = type(v388) == "function"
		else
			v386 = false
		end
	else
		v386 = false
	end
	assert(v386, "Parameter #1 to Promise.retry must be a function")
	local v389 = type(p_u_384) == "number"
	assert(v389, "Parameter #2 (times) to Promise.retry must be a number")
	local v390 = type(p_u_385) == "number"
	assert(v390, "Parameter #3 (seconds) to Promise.retry must be a number")
	local v_u_391 = { ... }
	local v_u_392 = select("#", ...)
	return v_u_44.resolve(p_u_383(...)):catch(function(...)
		-- upvalues: (copy) p_u_384, (ref) v_u_44, (copy) p_u_385, (copy) p_u_383, (copy) v_u_391, (copy) v_u_392
		if p_u_384 <= 0 then
			return v_u_44.reject(...)
		end
		v_u_44.delay(p_u_385):await()
		local v393 = v_u_391
		local v394 = v_u_392
		return v_u_44.retryWithDelay(p_u_383, p_u_384 - 1, p_u_385, unpack(v393, 1, v394))
	end)
end
function v_u_44.fromEvent(p_u_395, p396)
	-- upvalues: (copy) v_u_44
	local v_u_397 = p396 or function()
		return true
	end
	return v_u_44._new(debug.traceback(nil, 2), function(p_u_398, _, p399)
		-- upvalues: (copy) p_u_395, (ref) v_u_397
		local v_u_400 = nil
		local v_u_401 = false
		local function v402()
			-- upvalues: (ref) v_u_400
			v_u_400:Disconnect()
			v_u_400 = nil
		end
		v_u_400 = p_u_395:Connect(function(...)
			-- upvalues: (ref) v_u_397, (copy) p_u_398, (ref) v_u_400, (ref) v_u_401
			local v403 = v_u_397(...)
			if v403 == true then
				p_u_398(...)
				if v_u_400 then
					v_u_400:Disconnect()
					v_u_400 = nil
				else
					v_u_401 = true
				end
			else
				if type(v403) ~= "boolean" then
					error("Promise.fromEvent predicate should always return a boolean")
				end
				return
			end
		end)
		if v_u_401 and v_u_400 then
			return v402()
		end
		p399(v402)
	end)
end
function v_u_44.onUnhandledRejection(p_u_404)
	-- upvalues: (copy) v_u_44
	local v405 = v_u_44._unhandledRejectionCallbacks
	table.insert(v405, p_u_404)
	return function()
		-- upvalues: (ref) v_u_44, (copy) p_u_404
		local v406 = table.find(v_u_44._unhandledRejectionCallbacks, p_u_404)
		if v406 then
			table.remove(v_u_44._unhandledRejectionCallbacks, v406)
		end
	end
end
return v_u_44
