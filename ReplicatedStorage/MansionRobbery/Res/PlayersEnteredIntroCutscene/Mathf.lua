-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 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AAAGJgMAAbsWAwKkAggAABwAgJ8CAgKCAgIACQMJAz8EAAQAgAMmBAAMAIADPQIAAAAAAIB2QAM4BAAcAIAAwgFAARgAAAAAAAABAAAAAAABAAAAAAAAAQAAAAACAAIAAwMAAAAAAMMAAAAABwMAAAAAEG8EAABgAgMABAAAAFIDAAArAwoAbwQBAGAEAwACAAAAUgMBACsDBQBSBQEAUgYCALwDAL8CAAAAnwMEAoIDAgADAvyp8dJNYlA/AiuHFtnO9+8/A0EA0wFCARgAAAAAAAAAAAAAAAAAAAAA2AAAAAACAAABAgBFowAAAP8ABgAAAAAAwAEAADABAI4BAAAAwAECADABANEDAAAAwAEEADABABQFAAAAwAEGADABAG0HAAAAwAEIADABAFgJAAAAwAEKADABAF8LAAAAwAEMADABAM4NAAAAwAEOADABAD8PAAAAwAEQADABALURAAAAwAESADABAGsTAAAAwAEUADABAM0VAAAAwAEWADABANoXAAAAwAEYADABABYZAAAAwAEaADABAHsbAAAAwAEcADABAAIdAAAAwAEeADABAM0fAAAAwAEgADABACghAAAAwAEiABIAAAAwAQDPIwAAAMABJAASAAAAMAEAFyUAAADAASYAMAEARicAAADAASgAMAEANSkAAACCAAIAKgYAAwEGAQMIBgIDCwYDAw0GBAMPBgUDEAYGAxQGBwMVBggDFgYJAxcGCgMaBgsDIQYMAyIGDQMpBg4DMAYPAzoGEAM7BhEDPAYSAz4GEwNABhQDQhUAAQIDBAUGBwgJCgsMDQ4PEBESExQBAAEYAAAABAAABgAAFgAABAAABAAABAAABAAACAAACAAABAAACwAABAAACAAADAAACwAAFAAADwAADAAAAAwAAAAUAAARAAAIAQAAAAAVObPTqV4vdp4Ld7k916oI88S+PkANAYgXKwtqTdCsKfN/qLsPJDwhBg==

-- Decompiled by Krnl

local v_u_115 = {
	["FrameDelta"] = function(p1, p2)
		return 1 - (1 - p1) ^ (p2 * 60)
	end,
	["SafeLerp"] = function(p3, p4, p5)
		if p3 == nil or p5 >= 1 then
			return p4
		end
		if p4 == nil or p5 <= 0 then
			return p3
		end
		if typeof(p3) ~= "Color3" then
			return p3 * (1 - p5) + p4 * p5
		end
		local v6 = 1 - p5
		return Color3.new((p3.R ^ 2 * v6 + p4.R ^ 2 * p5) ^ 0.5, (p3.G ^ 2 * v6 + p4.G ^ 2 * p5) ^ 0.5, (p3.B ^ 2 * v6 + p4.B ^ 2 * p5) ^ 0.5)
	end,
	["PercentBetween"] = function(p7, p8, p9)
		if p9 - p8 == 0 then
			return 1
		end
		local v10 = (p7 - p8) / (p9 - p8)
		return math.clamp(v10, 0, 1)
	end,
	["Round"] = function(p11, p12, p13)
		local v14 = p11 / p12 + (p13 or 0.5)
		return math.floor(v14) * p12
	end,
	["RoundNumber"] = function(p15)
		if p15 >= 0 then
			local v16 = p15 + 0.5
			v18 = math.floor(v16)
			if v18 then
				::l3::
				return v18
			end
		end
		local v17 = p15 - 0.5
		local v18 = math.ceil(v17)
		goto l3
	end,
	["Lerp"] = function(p19, p20, p21)
		return p19 * (1 - p21) + p20 * p21
	end,
	["SmoothLerp"] = function(p22, p23, p24, p25)
		local v26 = 1 - p24
		local v27 = 1 - math.pow(v26, p25)
		if type(p22) == "number" then
			return (1 - v27) * p22 + p23 * v27
		else
			return p22:Lerp(p23, v27)
		end
	end,
	["LerpTowards"] = function(p28, p29, p30)
		if p28 < p29 then
			local v31 = p28 + p30
			return math.clamp(v31, p28, p29)
		else
			local v32 = p28 - p30
			return math.clamp(v32, p29, p28)
		end
	end,
	["Wrap"] = function(p33, p34, p35)
		return p34 + (p33 - p34) % (p35 - p34)
	end,
	["Cubic_Interpolate"] = function(p36, p37, p38, p39, p40)
		local v41 = p39 - p38 - (p36 - p37)
		local v42 = p36 - p37 - v41
		local v43 = p38 - p36
		return v41 * p40 ^ 3 + v42 * p40 ^ 2 + v43 * p40 + p37
	end,
	["SlerpVector"] = function(p44, p45, p46)
		return CFrame.new(Vector3.new(0, 0, 0), p44):Lerp(CFrame.new(Vector3.new(0, 0, 0), p45), p46).LookVector
	end,
	["RandomizeVector"] = function(p47, p48, p49)
		local v50 = CFrame.new(Vector3.new(), p48) * CFrame.Angles(0, 0, p47:NextNumber(0, 6.283185307179586))
		local v51 = CFrame.Angles
		local v52 = p47:NextNumber(math.cos(p49), 1)
		return (v50 * v51(math.acos(v52), 0, 0)).LookVector * p48.Magnitude
	end,
	["LerpColor3"] = function(p53, p54, p55)
		local v56 = 1 - p55
		return Color3.new((p53.R ^ 2 * v56 + p54.R ^ 2 * p55) ^ 0.5, (p53.G ^ 2 * v56 + p54.G ^ 2 * p55) ^ 0.5, (p53.B ^ 2 * v56 + p54.B ^ 2 * p55) ^ 0.5)
	end,
	["InPart"] = function(p57, p58, p59)
		local v60 = p57.CFrame:PointToObjectSpace(p58)
		local v61 = p57.Size * (p59 or 1)
		local v62 = v60.x
		if math.abs(v62) <= v61.x / 2 then
			local v63 = v60.y
			if math.abs(v63) <= v61.y / 2 then
				local v64 = v60.z
				if math.abs(v64) <= v61.z / 2 then
					return true
				end
			end
		end
		return false
	end,
	["IK"] = function(p65, p66, p67, p68)
		if (p65 - p66).magnitude >= p67 + p68 then
			return CFrame.new(p65, p66), 0, 0
		end
		if (p65 - p66).magnitude < math.max(p67, p68) - math.min(p67, p68) then
			return CFrame.new(p65, p66), 0, 3.141592653589793
		end
		local v69 = CFrame.new(p65, p66)
		local v70 = v69:pointToObjectSpace(p66)
		local v71 = (v70.z ^ 2 - p68 ^ 2 + p67 ^ 2) / (2 * v70.z)
		local v72 = 1 - (v71 / p67) ^ 2
		local v73 = math.sqrt(v72) * p67
		local v74 = v73 / (v71 ^ 2 + v73 ^ 2) ^ 0.5
		local v75 = -math.asin(v74)
		if v71 < v70.z then
			local v76 = -v73 / ((v70.z - v71) ^ 2 + v73 ^ 2) ^ 0.5
			v78 = -3.141592653589793 + math.asin(v76)
			if v78 then
				::l7::
				return v69, v75, v78 - v75
			end
		end
		local v77 = -v73 / ((v70.z - v71) ^ 2 + v73 ^ 2) ^ 0.5
		local v78 = -math.asin(v77)
		goto l7
	end,
	["Vector3ToPixel"] = function(p79, p80, p81)
		local v82 = p81.AbsoluteSize.X
		local v83 = p81.AbsoluteSize.Y
		local v84 = (p80.CoordinateFrame * CFrame.Angles(0, 0, -p80:GetRoll())):inverse() * p79
		local v85 = p80.FieldOfView
		local v86 = math.rad(v85) / 2
		local v87 = 1 / math.tan(v86)
		local v88 = v82 / 2 * (1 + v84.x / -v84.z * v87 * v83 / v82)
		local v89 = v83 / 2 * (1 + v84.y / -v84.z * v87)
		if v84.z > 0 then
			v88 = 20000
			v89 = 20000
		end
		return v88, v83 - v89 - 36
	end,
	["LerpAngle"] = function(p90, p91, p92)
		local v93
		if p90 - p91 < 180 then
			v93 = p90 + (p91 - p90) * p92
		else
			v93 = p90 + (360 + p91 - p90) * p92
		end
		return (v93 - 180) % 360 - 180
	end,
	["LerpTowardsAngle"] = function(p94, p95, p96)
		-- upvalues: (copy) v_u_115
		local v97 = p95 - p94
		if math.abs(v97) > 180 then
			if p95 < p94 then
				p94 = p94 + 360
			else
				p95 = p95 + 360
			end
		end
		return v_u_115.LerpTowards(p94, p95, p96)
	end,
	["LerpAngle2"] = function(p98, p99, p100)
		-- upvalues: (copy) v_u_115
		local v101 = p98 + 180
		local v102 = p99 + 180
		local v103 = v102 - v101
		difference = math.abs(v103)
		if difference > 180 then
			if v101 < v102 then
				v102 = v102 - 360
			else
				v101 = v101 - 360
			end
		end
		local v104 = v101 - 180
		local v105 = v102 - 180
		return v_u_115.Wrap(v_u_115.Lerp(v104, v105, p100), -180, 180)
	end,
	["AngleDistance"] = function(p106, p107)
		local v108 = math.deg(p106)
		local v109 = math.deg(p107)
		local v110 = v109 - v108
		difference = math.abs(v110)
		if difference > 180 then
			if v109 < v108 then
				v109 = v109 + 360
			else
				v108 = v108 + 360
			end
		end
		local v111 = v108 - v109
		return math.rad(v111)
	end,
	["InterpolateCFrame"] = function(p112, p113, p114)
		return p114 < 0.001 and p112 and p112 or (p114 > 0.999 and p113 and p113 or p112:lerp(p113, p114))
	end
}
return v_u_115
