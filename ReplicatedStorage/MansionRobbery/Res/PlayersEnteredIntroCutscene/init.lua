-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 

-- Decompiled by Krnl

local v_u_1 = game:GetService("TweenService")
local v_u_2 = script.Curve:FindFirstChild("CurveData")
if v_u_2 then
	v_u_2 = require(script.Curve.CurveData)
end
local v_u_3 = script:FindFirstChild("CatmullRomSpline")
if v_u_3 then
	v_u_3 = require(script.CatmullRomSpline)
end
local v4 = require(script.GraphBezier)
local v_u_5 = script:FindFirstChild("Mathf")
if v_u_5 then
	v_u_5 = require(script.Mathf)
end
local v_u_6 = script.Curve:FindFirstChild("UpVectorData")
if v_u_6 then
	v_u_6 = require(script.Curve.UpVectorData)
end
local v_u_7 = script.Curve:FindFirstChild("TransformFunction")
if v_u_7 then
	v_u_7 = require(script.Curve.TransformFunction)
end
local v_u_8
if v_u_2.AnimationKeyframes then
	local v9 = {}
	local v10 = v_u_2.AnimationKeyframes
	__set_list(v9, 1, {unpack(v10)})
	table.sort(v9, function(p11, p12)
		return p11.pos.X < p12.pos.X
	end)
	if #v9 == 0 or v9[1].pos.X > 0 then
		local v13 = {
			["pos"] = Vector2.new(0, 0),
			["left"] = Vector2.new(-0.1, 0),
			["right"] = Vector2.new(0.1, 0)
		}
		table.insert(v9, 1, v13)
	end
	if #v9 == 1 or v9[#v9].pos.X < 1 then
		local v14 = {
			["pos"] = Vector2.new(1, 1),
			["left"] = Vector2.new(-0.1, 0),
			["right"] = Vector2.new(0.1, 0)
		}
		table.insert(v9, v14)
	end
	v_u_8 = v4.new(v9)
else
	v_u_8 = nil
end
local v_u_15 = {}
local v16 = {}
local v_u_17 = v_u_2.Attributes.NumPoints
function v16.GetCurveValueAt(p18, p19)
	-- upvalues: (copy) v_u_5
	local v20 = p18:_getAttribute("GraphMinSpeed") or 0
	local v21 = p18:_getAttribute("GraphMaxSpeed") or 1
	local v22 = p18:_getCurveValueAt(p19)
	local v23 = math.clamp(v22, 0, 1)
	return v_u_5.Lerp(v20, v21, v23)
end
function v16.GetProgress(p24, p25, p26, p27)
	-- upvalues: (copy) v_u_15
	local v28, v29, v30 = p24:_getProgress(p25, p26)
	return p24:_getTransformed(v28, v29, v30, v_u_15, p24.DeltaTime or (p27 or 0.016666666666666666))
end
function v16.GetProgressRaw(p31, p32, p33, p34)
	-- upvalues: (copy) v_u_15
	local v35, v36, v37 = p31:_getProgress(p32, p33)
	return p31:_getTransformedRaw(v35, v36, v37, v_u_15, p31.DeltaTime or (p34 or 0.016666666666666666))
end
function v16.CreateTween(p_u_38, p39, p_u_40, p_u_41)
	-- upvalues: (copy) v_u_1
	local v_u_42 = Instance.new("NumberValue")
	local v_u_43 = v_u_1:Create(v_u_42, p39, {
		["Value"] = 1
	})
	v_u_43:GetPropertyChangedSignal("PlaybackState"):connect(function()
		-- upvalues: (copy) v_u_43, (copy) p_u_38
		if v_u_43.PlaybackState == Enum.PlaybackState.Playing then
			p_u_38.LastTick = os.clock()
		end
	end)
	v_u_42:GetPropertyChangedSignal("Value"):connect(function()
		-- upvalues: (copy) p_u_38, (copy) v_u_42, (copy) p_u_41, (copy) p_u_40
		local v44 = os.clock()
		p_u_38.DeltaTime = v44 - p_u_38.LastTick
		p_u_38.LastTick = v44
		p_u_41(p_u_38:GetProgress(v_u_42.Value, p_u_40))
	end)
	return v_u_43
end
function v16.Generate(p45)
	-- upvalues: (copy) v_u_2, (copy) v_u_3
	local v46 = v_u_2.ControlPoints
	local v47
	if v_u_2.Attributes.PathClosed == true then
		local v48 = {}
		for v49 = 1, #v46 do
			local v50 = v46[v49]
			table.insert(v48, v50)
		end
		local v51 = v46[1]
		table.insert(v48, v51)
		local v52 = v46[2]
		table.insert(v48, v52)
		local v53 = v46[3]
		table.insert(v48, v53)
		v47 = v_u_3.new(v48, v_u_2.Attributes.Tension)
	else
		v47 = v_u_3.new(v46, v_u_2.Attributes.Tension)
	end
	v47.LengthIterations = v_u_2.Attributes.LengthIterations or 2000
	v47:UpdateLength()
	p45.Spline = v47
	p45:_generatePointData()
end
function v16._getAttribute(_, p54)
	-- upvalues: (copy) v_u_2
	return v_u_2.Attributes[p54]
end
function v16._getCurveValueAt(_, p55)
	-- upvalues: (ref) v_u_8
	if v_u_8 then
		return v_u_8:CalculateValueAt(p55)
	end
end
function v16._getProgress(p56, p57, p58)
	-- upvalues: (copy) v_u_6
	local v59 = p56:_getAttribute("PathClosed")
	local v60 = p56.Spline:CalculatePositionRelativeToLength(p57)
	local v61 = p56.Spline:CalculateDerivativeRelativeToLength(p57)
	local v62 = p56:_getUpVector(p57, v60, v61)
	if v_u_6 then
		v62 = p56:_twistUpvector(v62, v59, p57, v61, v_u_6)
	end
	return v60 + v62 * (p58 or 0), v61, v62
end
function v16._getUpVector(p63, p64, p65, p66)
	-- upvalues: (copy) v_u_17
	if not p63.PointData then
		return Vector3.new(0, 1, 0)
	end
	local v67 = p64 * v_u_17
	local v68 = math.floor(v67)
	local v69 = p63.PointData.points[v68]
	return not v69 and Vector3.new(0, 1, 0) or CFrame.lookAt(p65, p65 + p66, v69.upVector).UpVector
end
function v16._getTwistAt(p70, p71, p72, p73)
	-- upvalues: (copy) v_u_5
	local v74 = nil
	local v75 = nil
	local v76 = nil
	local v77 = nil
	local v78 = nil
	local v79 = nil
	for _, v80 in pairs(p73.data) do
		local v81 = v80.degrees
		local v82 = v80.tValue
		if v81 ~= 0.00001 then
			v74 = v74 or v80
			if v76 then
				v79 = v80
			else
				if v82 <= p72 then
					v78 = v82
					v82 = v77
					v75 = v81
					v81 = v76
				end
				if v75 and v81 then
					v76 = v81
					v79 = v80
					v77 = v82
					break
				end
				v79 = v80
				v77 = v82
				v76 = v81
			end
		end
	end
	if not p71 and (v75 and not v76) then
		return v75
	end
	if p71 then
		if v76 and not v75 then
			v75 = v79.degrees + (p70.PointData.LoopAngleDiff or 0)
			v78 = v79.tValue - 1
		elseif v75 and not v76 then
			v76 = v74.degrees - (p70.PointData.LoopAngleDiff or 0)
			v77 = v74.tValue + 1
		end
	end
	if not (v75 and v76) then
		return 0
	end
	local v83 = v75 + (v76 - v75 + 180) % 360 - 180
	return v_u_5.Lerp(v75, v83, v_u_5.PercentBetween(p72, v78, v77))
end
function v16._twistUpvector(p84, p85, p86, p87, p88, p89)
	if p84.PointData then
		local v90 = p84:_getTwistAt(p86, p87, p89)
		if v90 == 0 then
			return p85
		else
			return CFrame.fromAxisAngle(p88, (math.rad(v90))) * p85
		end
	else
		return
	end
end
function v16._getTransformed(_, ...)
	-- upvalues: (copy) v_u_7
	local v_u_91 = { ... }
	if v_u_7 then
		local v93, v94 = pcall(function()
			-- upvalues: (ref) v_u_7, (copy) v_u_91
			local v92 = v_u_91
			return v_u_7(unpack(v92))
		end)
		if v93 then
			return v94
		end
	end
	local v95, v96, v97, _ = ...
	return CFrame.lookAt(v95, v95 + v96, v97)
end
function v16._getTransformedRaw(_, ...)
	-- upvalues: (copy) v_u_7
	local v_u_98 = { ... }
	if v_u_7 then
		local v100, v101 = pcall(function()
			-- upvalues: (ref) v_u_7, (copy) v_u_98
			local v99 = v_u_98
			return v_u_7(unpack(v99))
		end)
		if v100 then
			return v101
		end
	end
	local v102, v103, v104, _ = ...
	return v102, v103, v104
end
function v16._generatePointData(p105)
	-- upvalues: (copy) v_u_17
	local v106 = Vector3.new(0, 1, 0)
	local v107 = {
		["points"] = {}
	}
	for v108 = 1, v_u_17 do
		local v109 = v108 / v_u_17
		local v110 = p105.Spline:CalculatePositionRelativeToLength(v109)
		local v111 = p105.Spline:CalculateDerivativeRelativeToLength(v109)
		local v112 = CFrame.lookAt(v110, v110 + v111, v106).UpVector
		v107.points[v108] = {
			["upVector"] = v106,
			["pos"] = v110,
			["dir"] = v111,
			["t"] = v109
		}
		v106 = v112
	end
	local v113 = v106.Y
	v107.LoopAngleDiff = math.acos(v113) / 3.141592653589793 * 180 * (v106:Dot(v107.points[#v107.points].dir:Cross(Vector3.new(0, 1, 0))) < 0 and -1 or 1)
	p105.PointData = v107
end
return v16
