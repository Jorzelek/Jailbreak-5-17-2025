-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 

-- Decompiled by Krnl

return function()
	local v_u_1 = require(script.Parent.Store)
	describe("new", function()
		-- upvalues: (copy) v_u_1
		it("should instantiate with a reducer", function()
			-- upvalues: (ref) v_u_1
			local v2 = v_u_1.new(function(_, _)
				return "hello, world"
			end)
			expect(v2).to.be.ok()
			expect(v2:getState()).to.equal("hello, world")
			v2:destruct()
		end)
		it("should instantiate with a reducer and an initial state", function()
			-- upvalues: (ref) v_u_1
			local v4 = v_u_1.new(function(p3, _)
				return p3
			end, "initial state")
			expect(v4).to.be.ok()
			expect(v4:getState()).to.equal("initial state")
			v4:destruct()
		end)
		it("should instantiate with a reducer, initial state, and middlewares", function()
			-- upvalues: (ref) v_u_1
			local v6 = v_u_1.new(function(p5, _)
				return p5
			end, "initial state", {})
			expect(v6).to.be.ok()
			expect(v6:getState()).to.equal("initial state")
			v6:destruct()
		end)
		it("should modify the dispatch method when middlewares are passed", function()
			-- upvalues: (ref) v_u_1
			local v_u_7 = 0
			local v_u_8 = 0
			local v_u_9 = nil
			local v_u_10 = nil
			local v_u_11 = nil
			local v15 = { function(p_u_12, p13)
					-- upvalues: (ref) v_u_7, (ref) v_u_9, (ref) v_u_10, (ref) v_u_8, (ref) v_u_11
					v_u_7 = v_u_7 + 1
					v_u_9 = p_u_12
					v_u_10 = p13
					return function(p14)
						-- upvalues: (ref) v_u_8, (ref) v_u_11, (copy) p_u_12
						v_u_8 = v_u_8 + 1
						v_u_11 = p14
						p_u_12(p14)
					end
				end }
			local v18 = v_u_1.new(function(p16, p17)
				return p17.type == "test" and "test state" or p16
			end, "initial state", v15)
			expect(v_u_7).to.equal(1)
			expect(v_u_8).to.equal(0)
			expect(v_u_9).to.be.a("function")
			expect(v_u_10).to.equal(v18)
			v18:dispatch({
				["type"] = "test"
			})
			expect(v_u_7).to.equal(1)
			expect(v_u_8).to.equal(1)
			expect(v_u_11.type).to.equal("test")
			v18:flush()
			expect(v18:getState()).to.equal("test state")
			v18:destruct()
		end)
		it("should execute middleware left-to-right", function()
			-- upvalues: (ref) v_u_1
			local v_u_19 = {}
			local v29 = v_u_1.new(function(p20)
				return p20
			end, 5, { function(p_u_21, _)
					-- upvalues: (copy) v_u_19
					local v22 = v_u_19
					table.insert(v22, "instantiate a")
					return function(p23)
						-- upvalues: (ref) v_u_19, (copy) p_u_21
						local v24 = v_u_19
						table.insert(v24, "execute a")
						return p_u_21(p23)
					end
				end, function(p_u_25, _)
					-- upvalues: (copy) v_u_19
					local v26 = v_u_19
					table.insert(v26, "instantiate b")
					return function(p27)
						-- upvalues: (ref) v_u_19, (copy) p_u_25
						local v28 = v_u_19
						table.insert(v28, "execute b")
						return p_u_25(p27)
					end
				end })
			expect(#v_u_19).to.equal(2)
			expect(v_u_19[1]).to.equal("instantiate b")
			expect(v_u_19[2]).to.equal("instantiate a")
			v29:dispatch({
				["type"] = "test"
			})
			expect(#v_u_19).to.equal(4)
			expect(v_u_19[3]).to.equal("execute a")
			expect(v_u_19[4]).to.equal("execute b")
			v29:destruct()
		end)
		it("should send an initial action with a \'type\' field", function()
			-- upvalues: (ref) v_u_1
			local v_u_30 = nil
			local v_u_31 = 0
			local v34 = v_u_1.new(function(p32, p33)
				-- upvalues: (ref) v_u_30, (ref) v_u_31
				v_u_30 = p33
				v_u_31 = v_u_31 + 1
				return p32
			end)
			expect(v_u_31).to.equal(1)
			expect(v_u_30).to.be.a("table")
			expect(v_u_30.type).to.be.ok()
			v34:destruct()
		end)
		it("should report a reducer error thrown when handling the INIT action", function()
			-- upvalues: (ref) v_u_1
			local v_u_35 = nil
			local v_u_36 = nil
			local v_u_37 = nil
			local v41 = {
				["reportReducerError"] = function(p38, p39, p40)
					-- upvalues: (ref) v_u_35, (ref) v_u_36, (ref) v_u_37
					v_u_35 = p38
					v_u_36 = p39
					v_u_37 = p40
				end,
				["reportUpdateError"] = function() end
			}
			local v42 = v_u_1.new(function(_, _)
				error("Z4PH0D")
			end, {
				["Value"] = 1
			}, nil, v41)
			expect(v_u_35.Value).to.equal(1)
			expect(v_u_36.type).to.equal("@@INIT")
			expect(v_u_37.message).to.equal("Caught error in reducer with init")
			expect(string.find(v_u_37.thrownValue, "Z4PH0D")).to.be.ok()
			expect(string.find(v_u_37.thrownValue, script.Name)).to.be.ok()
			v42:destruct()
		end)
		it("should report a reducer error thrown when handling a subsequent action", function()
			-- upvalues: (ref) v_u_1
			local v_u_43 = nil
			local v_u_44 = nil
			local v_u_45 = nil
			local v49 = {
				["reportReducerError"] = function(p46, p47, p48)
					-- upvalues: (ref) v_u_43, (ref) v_u_44, (ref) v_u_45
					v_u_43 = p46
					v_u_44 = p47
					v_u_45 = p48
				end,
				["reportUpdateError"] = function() end
			}
			local v52 = v_u_1.new(function(p50, p51)
				if p51.type ~= "ThrowError" then
					return p51.type == "Increment" and {
						["Value"] = p50.Value + 1
					} or p50
				end
				error("Z4PH0D")
				return p50
			end, {
				["Value"] = 1
			}, nil, v49)
			expect(v_u_43).to.equal(nil)
			expect(v_u_44).to.equal(nil)
			expect(v_u_45).to.equal(nil)
			v52:dispatch({
				["type"] = "Increment"
			})
			v52:dispatch({
				["type"] = "ThrowError"
			})
			expect(v_u_43.Value).to.equal(2)
			expect(v_u_44.type).to.equal("ThrowError")
			expect(v_u_45.message).to.equal("Caught error in reducer")
			expect(string.find(v_u_45.thrownValue, "Z4PH0D")).to.be.ok()
			expect(string.find(v_u_45.thrownValue, script.Name)).to.be.ok()
			v52:destruct()
		end)
	end)
	describe("getState", function()
		-- upvalues: (copy) v_u_1
		it("should get the current state", function()
			-- upvalues: (ref) v_u_1
			local v53 = v_u_1.new(function(_, _)
				return "foo"
			end)
			local v54 = v53:getState()
			expect(v54).to.equal("foo")
			v53:destruct()
		end)
		it("should throw errors if triggered during dispatches", function()
			-- upvalues: (ref) v_u_1
			local v_u_55 = nil
			v_u_55 = v_u_1.new(function(_, p56)
				-- upvalues: (ref) v_u_55
				if p56.type ~= "@@INIT" then
					v_u_55:getState()
				end
			end)
			expect(function()
				-- upvalues: (ref) v_u_55
				v_u_55:dispatch({
					["type"] = "SomeAction"
				})
			end).to.throw()
			v_u_55:destruct()
		end)
	end)
	describe("dispatch", function()
		-- upvalues: (copy) v_u_1
		it("should be sent through the reducer", function()
			-- upvalues: (ref) v_u_1
			local v59 = v_u_1.new(function(p57, p58)
				return p58.type == "act" and "bar" or (p57 or "foo")
			end)
			expect(v59).to.be.ok()
			expect(v59:getState()).to.equal("foo")
			v59:dispatch({
				["type"] = "act"
			})
			v59:flush()
			expect(v59:getState()).to.equal("bar")
			v59:destruct()
		end)
		it("should trigger the changed event after a flush", function()
			-- upvalues: (ref) v_u_1
			local v63 = v_u_1.new(function(p60, p61)
				local v62 = p60 or 0
				if p61.type == "increment" then
					return v62 + 1
				else
					return v62
				end
			end)
			local v_u_64 = 0
			v63.changed:connect(function(p65, p66)
				-- upvalues: (ref) v_u_64
				expect(p66).to.equal(0)
				expect(p65).to.equal(1)
				v_u_64 = v_u_64 + 1
			end)
			v63:dispatch({
				["type"] = "increment"
			})
			v63:flush()
			expect(v_u_64).to.equal(1)
			v63:destruct()
		end)
		it("should handle actions dispatched within the changed event", function()
			-- upvalues: (ref) v_u_1
			local v_u_70 = v_u_1.new(function(p67, p68)
				local v69 = p67 or {
					["value"] = 0
				}
				return p68.type == "increment" and {
					["value"] = v69.value + 1
				} or (p68.type == "decrement" and {
					["value"] = v69.value - 1
				} or v69)
			end)
			local v_u_71 = 0
			v_u_70.changed:connect(function(p72, p73)
				-- upvalues: (copy) v_u_70, (ref) v_u_71
				expect(p72).never.to.equal(p73)
				if p72.value > 0 then
					v_u_70:dispatch({
						["type"] = "decrement"
					})
				end
				v_u_71 = v_u_71 + 1
			end)
			v_u_70:dispatch({
				["type"] = "increment"
			})
			v_u_70:flush()
			v_u_70:flush()
			expect(v_u_71).to.equal(2)
			v_u_70:destruct()
		end)
		it("should prevent yielding from changed handler", function()
			-- upvalues: (ref) v_u_1
			local v_u_74 = nil
			local v_u_75 = nil
			local v77 = {
				["reportUpdateError"] = function(_, _, _, p76)
					-- upvalues: (ref) v_u_74, (ref) v_u_75
					v_u_74 = p76.message
					v_u_75 = p76.thrownValue
				end,
				["reportReducerError"] = function() end
			}
			local v_u_78 = 0
			local v_u_79 = 0
			local v81 = v_u_1.new(function(p80, _)
				return (p80 or 0) + 1
			end, nil, nil, v77)
			v81.changed:connect(function(_, _)
				-- upvalues: (ref) v_u_78, (ref) v_u_79
				v_u_78 = v_u_78 + 1
				wait()
				v_u_79 = v_u_79 + 1
			end)
			v81:dispatch({
				["type"] = "increment"
			})
			v81:flush()
			expect(v_u_78).to.equal(1)
			expect(v_u_79).to.equal(0)
			expect(v_u_74).to.equal("Caught error flushing store updates")
			expect(string.find(v_u_75, script.Name)).to.be.ok()
			expect(string.find(v_u_75, "to yield")).to.be.ok()
			v81:destruct()
		end)
		it("should throw if an action is dispatched without a type field", function()
			-- upvalues: (ref) v_u_1
			local v_u_83 = v_u_1.new(function(p82, _)
				return p82
			end)
			expect(function()
				-- upvalues: (copy) v_u_83
				v_u_83:dispatch({})
			end).to.throw()
			v_u_83:destruct()
		end)
		it("should throw if the action is not a function or table", function()
			-- upvalues: (ref) v_u_1
			local v_u_85 = v_u_1.new(function(p84, _)
				return p84
			end)
			expect(function()
				-- upvalues: (copy) v_u_85
				v_u_85:dispatch(1)
			end).to.throw()
			v_u_85:destruct()
		end)
		it("should report an error if the listeners error when flushing", function()
			-- upvalues: (ref) v_u_1
			local v_u_86 = nil
			local v_u_87 = nil
			local v_u_88 = nil
			local v_u_89 = nil
			local v94 = {
				["reportReducerError"] = function() end,
				["reportUpdateError"] = function(p90, p91, p92, p93)
					-- upvalues: (ref) v_u_86, (ref) v_u_87, (ref) v_u_88, (ref) v_u_89
					v_u_86 = p90
					v_u_87 = p91
					v_u_88 = p92
					v_u_89 = p93
				end
			}
			local v97 = v_u_1.new(function(p95, p96)
				return p96.type == "Increment" and {
					["Value"] = p95.Value + p96.amount
				} or p95
			end, {
				["Value"] = 1
			}, nil, v94)
			v97.changed:connect(function(p98, _)
				if p98.Value == 15 then
					error("Z4PH0D")
				end
			end)
			local v99 = {
				{
					["type"] = "Increment",
					["amount"] = 1
				},
				{
					["type"] = "Increment",
					["amount"] = 3
				},
				{
					["type"] = "Increment",
					["amount"] = 10
				}
			}
			local v100 = v_u_87
			local v101 = v_u_86
			local v102 = v_u_88
			local v103 = v_u_89
			for _, v104 in ipairs(v99) do
				v97:dispatch(v104)
			end
			v97:flush()
			expect(v103.message).to.equal("Caught error flushing store updates")
			expect(string.find(v103.thrownValue, script.Name)).to.be.ok()
			expect(v102[1]).to.equal(v99[1])
			expect(v102[2]).to.equal(v99[2])
			expect(v102[3]).to.equal(v99[3])
			expect(v101.Value).to.equal(1)
			expect(v100.Value).to.equal(15)
			v97:destruct()
		end)
		it("should throw errors if dispatching while a dispatch is already happening", function()
			-- upvalues: (ref) v_u_1
			local v_u_105 = nil
			v_u_105 = v_u_1.new(function(_, p106)
				-- upvalues: (ref) v_u_105
				if p106.type == "SomeAction" then
					v_u_105:dispatch({
						["type"] = "MidDispatchAction"
					})
				end
			end)
			expect(function()
				-- upvalues: (ref) v_u_105
				v_u_105:dispatch({
					["type"] = "SomeAction"
				})
			end).to.throw()
			v_u_105:destruct()
		end)
	end)
	describe("flush", function()
		-- upvalues: (copy) v_u_1
		it("should not fire a changed event if there were no dispatches", function()
			-- upvalues: (ref) v_u_1
			local v107 = v_u_1.new(function() end)
			local v_u_108 = 0
			v107.changed:connect(function()
				-- upvalues: (ref) v_u_108
				v_u_108 = v_u_108 + 1
			end)
			v107:flush()
			expect(v_u_108).to.equal(0)
			v107:dispatch({
				["type"] = "increment"
			})
			v107:flush()
			expect(v_u_108).to.equal(1)
			v107:flush()
			expect(v_u_108).to.equal(1)
			v107:destruct()
		end)
	end)
end
