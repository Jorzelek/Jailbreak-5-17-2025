-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 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

-- Decompiled by Krnl

return function()
	local v_u_1 = require(script.Parent.makeActionCreator)
	it("should set the name of the actionCreator creator", function()
		-- upvalues: (copy) v_u_1
		local v2 = v_u_1("foo", function()
			return {}
		end)
		expect(v2.name).to.equal("foo")
	end)
	it("should return a table when called as a function", function()
		-- upvalues: (copy) v_u_1
		local v3 = v_u_1("foo", function()
			return {}
		end)
		expect(v3()).to.be.a("table")
	end)
	it("should set the type of the action creator", function()
		-- upvalues: (copy) v_u_1
		local v4 = v_u_1("foo", function()
			return {}
		end)
		expect(v4().type).to.equal("foo")
	end)
	it("should set values", function()
		-- upvalues: (copy) v_u_1
		local v6 = v_u_1("foo", function(p5)
			return {
				["value"] = p5
			}
		end)
		expect(v6(100).value).to.equal(100)
	end)
	it("should throw when its result does not return a table", function()
		-- upvalues: (copy) v_u_1
		local v7 = v_u_1("foo", function()
			return function() end
		end)
		expect(v7).to.throw()
	end)
	it("should throw if the first argument is not a string", function()
		-- upvalues: (copy) v_u_1
		expect(function()
			-- upvalues: (ref) v_u_1
			v_u_1(nil, function()
				return {}
			end)
		end).to.throw()
		expect(function()
			-- upvalues: (ref) v_u_1
			v_u_1(100, function()
				return {}
			end)
		end).to.throw()
	end)
	it("should throw if the second argument is not a function", function()
		-- upvalues: (copy) v_u_1
		expect(function()
			-- upvalues: (ref) v_u_1
			v_u_1("foo", nil)
		end).to.throw()
		expect(function()
			-- upvalues: (ref) v_u_1
			v_u_1("foo", {})
		end).to.throw()
	end)
end
