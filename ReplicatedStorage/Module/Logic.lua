-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 

-- Decompiled by Krnl

local v1 = {}
local v_u_2 = math.exp
local v_u_3 = math.cos
local v_u_4 = math.sin
local function v_u_30(p5)
	-- upvalues: (copy) v_u_2, (copy) v_u_3, (copy) v_u_4
	local v6 = tick() - p5.t
	local v7 = p5.Freq
	local v8 = p5.Damp
	local v9 = p5.p
	local v10 = p5.v
	local v11 = p5.Target
	local v12 = v9 - v11
	if v8 <= 1 then
		if v8 == 1 then
			local v13 = v_u_2(-v7 * v6)
			local v14 = v10 + v7 * v12
			local v15 = (v14 * v6 + v12) * v13
			return v11 + v15, v14 * v13 - v15 * v7
		end
		local v16 = v7 * v8
		local v17 = v7 * (1 - v8 * v8) ^ 0.5
		local v18 = v_u_2(-v16 * v6)
		local v19 = v_u_3(v17 * v6)
		local v20 = v_u_4(v17 * v6)
		local v21 = (v10 + v16 * v12) / v17
		return v11 + v18 * (v12 * v19 + v21 * v20), -v18 * ((v12 * v16 - v21 * v17) * v19 + (v12 * v17 + v21 * v16) * v20)
	end
	local v22 = -v7 * v8
	local v23 = v7 * (v8 * v8 - 1) ^ 0.5
	local v24 = v22 - v23
	local v25 = v22 + v23
	local v26 = v_u_2(v24 * v6)
	local v27 = v_u_2(v25 * v6)
	local v28 = (v10 - v12 * v25) / (-2 * v23)
	local v29 = v12 - v28
	return v11 + v28 * v26 + v29 * v27, v28 * v24 * v26 + v29 * v25 * v27
end
local function v_u_35(p31, p32)
	-- upvalues: (copy) v_u_30
	local v33, v34 = v_u_30(p31)
	p31.p = v33
	p31.v = v34
	p31.Target = p32
	p31.t = tick()
	return v33, v34
end
local function v_u_41(p36, p37)
	-- upvalues: (copy) v_u_30
	local v38, v39 = v_u_30(p36)
	p36.t = tick()
	local v40 = v39 + p37
	p36.p = v38
	p36.v = v40
end
function v1.MakeSpring()
	-- upvalues: (copy) v_u_30, (copy) v_u_35, (copy) v_u_41
	return {
		["p"] = nil,
		["v"] = nil,
		["Target"] = nil,
		["Damp"] = nil,
		["Freq"] = nil,
		["t"] = tick(),
		["Update"] = v_u_30,
		["SetTarget"] = v_u_35,
		["Accelerate"] = v_u_41
	}
end
v1.SpringUpdate = v_u_30
local v_u_42 = CFrame.new
local v_u_43 = v_u_42()
local v_u_44 = math.cos
local v_u_45 = math.sin
local v_u_46 = v_u_43.pointToObjectSpace
function v1.FromAxisAngle(p47)
	-- upvalues: (copy) v_u_45, (copy) v_u_42, (copy) v_u_44, (copy) v_u_43
	local v48 = p47.x
	local v49 = p47.y
	local v50 = p47.z
	local v51 = (v48 * v48 + v49 * v49 + v50 * v50) ^ 0.5
	if v51 <= 0.00001 then
		return v_u_43
	end
	local v52 = v_u_45(v51 * 0.5) / v51
	return v_u_42(0, 0, 0, v52 * v48, v52 * v49, v52 * v50, (v_u_44(v51 * 0.5)))
end
function v1.SolveIK(p53, p54, p55, p56, p57)
	-- upvalues: (copy) v_u_46, (copy) v_u_44, (copy) v_u_45, (copy) v_u_42
	local v58 = v_u_46(p55, p56)
	local v59 = v58.x
	local v60 = v58.y
	local v61 = v58.z
	local v62 = (v59 * v59 + v60 * v60 + v61 * v61) ^ 0.5
	local v63 = v59 / v62
	local v64 = v60 / v62
	local v65 = v61 / v62
	if p53 + p54 < v62 then
		v62 = p53 + p54 or v62
	end
	local v66 = (p54 * p54 - p53 * p53 - v62 * v62) / (2 * p53 * v62)
	local v67 = (1 - v66 * v66) ^ 0.5
	local v68 = (2 * (1 + v67 * v64 + v66 * v65)) ^ 0.5
	local v69 = v68 * 0.5
	local v70 = (v67 * v65 - v66 * v64) / v68
	local v71 = v66 * v63 / v68
	local v72 = -v67 * v63 / v68
	local v73, v74, v75
	if p57 then
		local v76 = v_u_44(p57 / 2)
		local v77 = v_u_45(p57 / 2)
		v73 = v76 * v69 - v77 * (v63 * v70 + v64 * v71 + v65 * v72)
		v74 = v76 * v70 + v77 * (v63 * v69 - v65 * v71 + v64 * v72)
		v75 = v76 * v71 + v77 * (v64 * v69 + v65 * v70 - v63 * v72)
		v72 = v76 * v72 + v77 * (v65 * v69 - v64 * v70 + v63 * v71)
	else
		v73 = v69
		v75 = v71
		v74 = v70
	end
	local v78 = (v62 * v66 + p53) / (v62 * v62 + 2 * v62 * v66 * p53 + p53 * p53) ^ 0.5
	local v79 = ((1 - v78) * 0.5) ^ 0.5
	local v80 = ((1 + v78) * 0.5) ^ 0.5
	return p55 * v_u_42(-p53 * 2 * (v74 * v72 + v75 * v73), p53 * 2 * (v74 * v73 - v75 * v72), p53 * (2 * (v74 * v74 + v75 * v75) - 1), v79 * v74 + v80 * v73, v79 * v75 + v80 * v72, v79 * v72 - v80 * v75, v79 * v73 - v80 * v74), p55 * v_u_42(0, 0, 0, v74, v75, v72, v73)
end
local v_u_81 = Vector3.new().Dot
local v_u_82 = math.min
local v_u_83 = math.max
local v_u_84 = CFrame.new().components
local v_u_85 = math.abs
local function v_u_163(p86, p87, p88, p89, p90)
	-- upvalues: (copy) v_u_84, (copy) v_u_82, (copy) v_u_83
	local v91, v92, v93
	if p88 then
		v91 = p88.x
		v92 = p88.y
		v93 = p88.z
	else
		v91 = 1
		v92 = 0
		v93 = 0
	end
	local v94, v95, v96
	if p89 then
		v94 = p89.x
		v95 = p89.y
		v96 = p89.z
	else
		v95 = 1
		v96 = 0
		v94 = 0
	end
	local v97, v98, v99
	if p90 then
		v97 = p90.x
		v98 = p90.y
		v99 = p90.z
	else
		v97 = 0
		v98 = 0
		v99 = 1
	end
	local v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111 = v_u_84(p86)
	local v112 = 0.5 * p87.x
	local v113 = 0.5 * p87.y
	local v114 = 0.5 * p87.z
	local v115 = v100 - v103 * v112 - v104 * v113 - v105 * v114
	local v116 = v101 - v106 * v112 - v107 * v113 - v108 * v114
	local v117 = v102 - v109 * v112 - v110 * v113 - v111 * v114
	local v118 = v100 - v103 * v112 - v104 * v113 + v105 * v114
	local v119 = v101 - v106 * v112 - v107 * v113 + v108 * v114
	local v120 = v102 - v109 * v112 - v110 * v113 + v111 * v114
	local v121 = v100 - v103 * v112 + v104 * v113 - v105 * v114
	local v122 = v101 - v106 * v112 + v107 * v113 - v108 * v114
	local v123 = v102 - v109 * v112 + v110 * v113 - v111 * v114
	local v124 = v100 - v103 * v112 + v104 * v113 + v105 * v114
	local v125 = v101 - v106 * v112 + v107 * v113 + v108 * v114
	local v126 = v102 - v109 * v112 + v110 * v113 + v111 * v114
	local v127 = v100 + v103 * v112 - v104 * v113 - v105 * v114
	local v128 = v101 + v106 * v112 - v107 * v113 - v108 * v114
	local v129 = v102 + v109 * v112 - v110 * v113 - v111 * v114
	local v130 = v100 + v103 * v112 - v104 * v113 + v105 * v114
	local v131 = v101 + v106 * v112 - v107 * v113 + v108 * v114
	local v132 = v102 + v109 * v112 - v110 * v113 + v111 * v114
	local v133 = v100 + v103 * v112 + v104 * v113 - v105 * v114
	local v134 = v101 + v106 * v112 + v107 * v113 - v108 * v114
	local v135 = v102 + v109 * v112 + v110 * v113 - v111 * v114
	local v136 = v100 + v103 * v112 + v104 * v113 + v105 * v114
	local v137 = v101 + v106 * v112 + v107 * v113 + v108 * v114
	local v138 = v102 + v109 * v112 + v110 * v113 + v111 * v114
	local v139 = v91 * v115 + v92 * v116 + v93 * v117
	local v140 = v91 * v118 + v92 * v119 + v93 * v120
	local v141 = v91 * v121 + v92 * v122 + v93 * v123
	local v142 = v91 * v124 + v92 * v125 + v93 * v126
	local v143 = v91 * v127 + v92 * v128 + v93 * v129
	local v144 = v91 * v130 + v92 * v131 + v93 * v132
	local v145 = v91 * v133 + v92 * v134 + v93 * v135
	local v146 = v91 * v136 + v92 * v137 + v93 * v138
	local v147 = v94 * v115 + v95 * v116 + v96 * v117
	local v148 = v94 * v118 + v95 * v119 + v96 * v120
	local v149 = v94 * v121 + v95 * v122 + v96 * v123
	local v150 = v94 * v124 + v95 * v125 + v96 * v126
	local v151 = v94 * v127 + v95 * v128 + v96 * v129
	local v152 = v94 * v130 + v95 * v131 + v96 * v132
	local v153 = v94 * v133 + v95 * v134 + v96 * v135
	local v154 = v94 * v136 + v95 * v137 + v96 * v138
	local v155 = v97 * v115 + v98 * v116 + v99 * v117
	local v156 = v97 * v118 + v98 * v119 + v99 * v120
	local v157 = v97 * v121 + v98 * v122 + v99 * v123
	local v158 = v97 * v124 + v98 * v125 + v99 * v126
	local v159 = v97 * v127 + v98 * v128 + v99 * v129
	local v160 = v97 * v130 + v98 * v131 + v99 * v132
	local v161 = v97 * v133 + v98 * v134 + v99 * v135
	local v162 = v97 * v136 + v98 * v137 + v99 * v138
	return v_u_82(v139, v140, v141, v142, v143, v144, v145, v146), v_u_83(v139, v140, v141, v142, v143, v144, v145, v146), v_u_82(v147, v148, v149, v150, v151, v152, v153, v154), v_u_83(v147, v148, v149, v150, v151, v152, v153, v154), v_u_82(v155, v156, v157, v158, v159, v160, v161, v162), v_u_83(v155, v156, v157, v158, v159, v160, v161, v162)
end
local function v_u_181(p164, p165, p166, p167)
	-- upvalues: (copy) v_u_163
	local v168 = nil
	local v169 = nil
	local v170 = nil
	local v171 = nil
	local v172 = nil
	local v173 = nil
	for _, v174 in next, p164 do
		local v175, v176, v177, v178, v179, v180 = v_u_163(v174.CFrame, v174.Size, p165, p166, p167)
		if v171 and v175 >= v171 then
			v175 = v171
		end
		if v172 and v172 >= v176 then
			v176 = v172
		end
		if v173 and v177 >= v173 then
			v177 = v173
		end
		if v168 and v168 >= v178 then
			v178 = v168
		end
		if v169 and v179 >= v169 then
			v179 = v169
		end
		if v170 and v170 >= v180 then
			v173 = v177
			v172 = v176
			v171 = v175
			v169 = v179
			v168 = v178
		else
			v173 = v177
			v172 = v176
			v171 = v175
			v170 = v180
			v169 = v179
			v168 = v178
		end
	end
	return v171, v172, v173, v168, v169, v170
end
function v1.SingleAABB(p182, p183)
	-- upvalues: (copy) v_u_163
	local v184, v185, v186, v187, v188, v189 = v_u_163(p182, p183, Vector3.new(1, 0, 0), Vector3.new(0, 1, 0), Vector3.new(0, 0, 1))
	local v190 = CFrame.new(0.5 * (v184 + v185), 0.5 * (v186 + v187), 0.5 * (v188 + v189), (Vector3.new(1, 0, 0)).x, (Vector3.new(0, 1, 0)).x, (Vector3.new(0, 0, 1)).x, (Vector3.new(1, 0, 0)).y, (Vector3.new(0, 1, 0)).y, (Vector3.new(0, 0, 1)).y, (Vector3.new(1, 0, 0)).z, (Vector3.new(0, 1, 0)).z, (Vector3.new(0, 0, 1)).z)
	local v191 = v185 - v184
	local v192 = v187 - v186
	local v193 = v189 - v188
	return v190, Vector3.new(v191, v192, v193)
end
v1.SingleAABBRaw = v_u_163
function v1.MultiAABB(p194)
	-- upvalues: (copy) v_u_181
	local v195, v196, v197, v198, v199, v200 = v_u_181(p194, Vector3.new(1, 0, 0), Vector3.new(0, 1, 0), Vector3.new(0, 0, 1))
	local v201 = CFrame.new(0.5 * (v195 + v196), 0.5 * (v197 + v198), 0.5 * (v199 + v200), (Vector3.new(1, 0, 0)).x, (Vector3.new(0, 1, 0)).x, (Vector3.new(0, 0, 1)).x, (Vector3.new(1, 0, 0)).y, (Vector3.new(0, 1, 0)).y, (Vector3.new(0, 0, 1)).y, (Vector3.new(1, 0, 0)).z, (Vector3.new(0, 1, 0)).z, (Vector3.new(0, 0, 1)).z)
	local v202 = v196 - v195
	local v203 = v198 - v197
	local v204 = v200 - v199
	return v201, Vector3.new(v202, v203, v204)
end
v1.MultiAABBRaw = v_u_181
function v1.IntersectAABB(p205, p206, p207, p208, p209, p210, p211, p212, p213, p214, p215, p216)
	local v217
	if p205 <= p212 and (p211 <= p206 and (p207 <= p214 and (p213 <= p208 and p209 <= p216))) then
		v217 = p215 <= p210
	else
		v217 = false
	end
	return v217
end
function v1.IntersectPrism(p218, p219, p220, p221)
	-- upvalues: (copy) v_u_163
	local v222, v223, v224, v225, v226, v227 = v_u_163(p218, p219)
	local v228, v229, v230, v231, v232, v233 = v_u_163(p220, p221)
	local v234
	if v222 <= v229 and (v228 <= v223 and (v224 <= v231 and (v230 <= v225 and v226 <= v233))) then
		v234 = v232 <= v227
	else
		v234 = false
	end
	return v234
end
function v1.IntersectMultiPrism(p235)
	-- upvalues: (copy) v_u_163
	for v236 = 1, #p235 do
		local v237 = p235[v236]
		local v238, v239, v240, v241, v242, v243 = v_u_163(v237.CFrame, v237.Size, Vector3.new(1, 0, 0), Vector3.new(0, 1, 0), Vector3.new(0, 0, 1))
		for v244 = v236 + 1, #p235 do
			local v245 = p235[v244]
			local v246, v247, v248, v249, v250, v251 = v_u_163(v245.CFrame, v245.Size, Vector3.new(1, 0, 0), Vector3.new(0, 1, 0), Vector3.new(0, 0, 1))
			local v252
			if v238 <= v247 and (v246 <= v239 and (v240 <= v249 and (v248 <= v241 and v242 <= v251))) then
				v252 = v250 <= v243
			else
				v252 = false
			end
			if v252 then
				return true
			end
		end
	end
	return false
end
function v1.IntersectRectangleRaw(p253, p254, p255, p256, p257, p258, p259, p260)
	local v261
	if p253 <= p258 and (p257 <= p254 and p255 <= p260) then
		v261 = p259 <= p256
	else
		v261 = false
	end
	return v261
end
function v1.ContainRectangleRaw(p262, p263, p264, p265, p266, p267, p268, p269)
	local v270
	if p266 <= p262 and (p263 <= p267 and p268 <= p264) then
		v270 = p265 <= p269
	else
		v270 = false
	end
	return v270
end
function v1.IsPointInRectangleRaw(p271, p272, p273, p274, p275, p276)
	local v277
	if p273 <= p271 and (p271 <= p274 and p275 <= p272) then
		v277 = p272 <= p276
	else
		v277 = false
	end
	return v277
end
function v1.IntersectRayPlane(p278, p279, p280, p281)
	-- upvalues: (copy) v_u_81, (copy) v_u_85
	local v282 = v_u_81(p279, p281)
	if v_u_85(v282) <= 1e-6 then
		return false
	else
		local v283 = v_u_81(p280 - p278, p281)
		if v283 > 0 then
			return false
		else
			return true, p278 + p279 * (v283 / v282)
		end
	end
end
local v_u_284 = math.cos
local v_u_285 = math.tan
function v1.DoesFixedConeIntersectSphere(p286, p287, p288, p289, p290, p291)
	-- upvalues: (copy) v_u_285, (copy) v_u_284
	local v292 = p290 - p286
	if p288 <= p287:Dot(v292) then
		return false
	end
	local v293 = v292:Dot(p287)
	local v294 = v293 * v_u_285(p289)
	return ((v292:Dot(v292) - v293 * v293) ^ 0.5 - v294) * v_u_284(p289) <= p291
end
local v_u_295 = math.asin
local v_u_296 = math.atan
local v_u_297 = math.cos
local v_u_298 = math.sin
function v1.OffsetLookAtTarget(p299, p300, _, p301, p302, p303)
	-- upvalues: (copy) v_u_296, (copy) v_u_295, (copy) v_u_297, (copy) v_u_298
	if p301 == 0 or (p302 == 0 or p303 == 0) then
		return 0, 0
	end
	local v304 = p301 * p301 + p303 * p303
	local v305 = (p303 < 0 and v_u_296(p301 / p303) or 3.141592653589793 - v_u_296(-p301 / p303)) + (p299 * p299 < v304 and v_u_295(p299 / v304 ^ 0.5) or v_u_295(v304 ^ 0.5 / p299))
	local v306 = v_u_297(v305)
	local v307 = v_u_298(v305)
	local _ = p301 * v306 - p303 * v307
	local v308 = p303 * v306 + p301 * v307
	local v309 = p302 * p302 + v308 * v308
	return v305, (v308 < 0 and v_u_296(-p302 / v308) or v_u_296(p302 / v308)) - (p300 * p300 < v309 and v_u_295(p300 / v309 ^ 0.5) or v_u_295(v309 ^ 0.5 / p300))
end
function v1.SinkRay(p310, p311, p312, p313)
	local v314 = 0
	while true do
		v314 = v314 + 1
		local v315 = Ray.new(p310, p311 * p312)
		local v316, v317, _ = workspace:FindPartOnRayWithIgnoreList(v315, p313)
		local v318 = (v317 - p310).Magnitude
		p312 = p312 - v318
		if v316 then
			if v316.CanCollide then
				return v317, p311, v316
			end
			table.insert(p313, v316)
		end
		if p312 <= 0 or (v318 < 0.001 or v314 > 10) then
			return v317, p311
		end
		p310 = v317
	end
end
function v1.TraceBounceRay(p319, p320, p321, p322)
	local v323 = 0
	while true do
		v323 = v323 + 1
		local v324 = Ray.new(p319, p320 * p321)
		local v325, v326, v327 = workspace:FindPartOnRayWithIgnoreList(v324, p322)
		local v328 = (v326 - p319).Magnitude
		p321 = p321 - v328
		if v325 and v325.CanCollide then
			p320 = p320 - 2 * p320:Dot(v327) * v327
		end
		if p321 <= 0 or (v328 < 0.001 or v323 > 10) then
			return v326, p320
		end
		p319 = v326
	end
end
return v1
