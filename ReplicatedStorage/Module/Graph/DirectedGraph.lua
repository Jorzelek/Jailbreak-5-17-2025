-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 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

-- Decompiled by Krnl

local v_u_1 = {}
v_u_1.__index = v_u_1
function v_u_1.new()
	-- upvalues: (copy) v_u_1
	local v2 = {}
	local v3 = v_u_1
	setmetatable(v2, v3)
	v2.MapNodeNode = {}
	v2.ListNode = {}
	return v2
end
function v_u_1.GetNeighbors(p4, p5)
	local v6 = p4.MapNodeNode[p5] ~= nil
	assert(v6)
	local v7 = {}
	for v8 in pairs(p4.MapNodeNode[p5]) do
		table.insert(v7, v8)
	end
	return v7
end
function v_u_1.GetUndirectedNeighbors(p9, p10)
	local v11 = p9.MapNodeNode[p10] ~= nil
	assert(v11)
	local v12 = {}
	for v13 in pairs(p9.MapNodeNode[p10]) do
		table.insert(v12, v13)
	end
	for v14, v15 in pairs(p9.MapNodeNode) do
		if v15[p10] then
			table.insert(v12, v14)
		end
	end
	return v12
end
function v_u_1.AddNode(p16, p17)
	if p16.MapNodeNode[p17] == nil then
		p16.MapNodeNode[p17] = {}
		local v18 = p16.ListNode
		table.insert(v18, p17)
	end
end
function v_u_1.AddEdge(p19, p20, p21)
	if p19.MapNodeNode[p20] == nil then
		p19:AddNode(p20)
	end
	if p19.MapNodeNode[p21] == nil then
		p19:AddNode(p21)
	end
	if p19.MapNodeNode[p20][p21] ~= nil then
		error(("Edge already exists from `%s` to `%s`"):format(p20, p21))
	end
	p19.MapNodeNode[p20][p21] = true
end
function v_u_1.HasEdge(p22, p23, p24)
	local v25
	if p22.MapNodeNode[p23] == nil then
		v25 = false
	else
		v25 = p22.MapNodeNode[p23][p24] == true
	end
	return v25
end
function v_u_1.Inverse(p26)
	local v27 = getmetatable(p26).new()
	for _, v28 in ipairs(p26.ListNode) do
		v27:AddNode(v28)
	end
	for v29, v30 in pairs(p26.MapNodeNode) do
		for v31 in pairs(v30) do
			v27:AddEdge(v31, v29)
		end
	end
	return v27
end
return v_u_1
