-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 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

-- Decompiled by Krnl

local v_u_1 = require(script.Parent.ContractConsts)
local v_u_2 = game:GetService("CollectionService")
local v_u_27 = {
	["canReroll"] = function(p3, p4)
		-- upvalues: (copy) v_u_2, (copy) v_u_27
		local v5 = typeof(p3) == "Instance"
		assert(v5, "Invalid obj passed")
		local v6 = v_u_2
		assert(v6:HasTag(p3, "Contract"))
		local v7 = typeof(p4) == "boolean"
		assert(v7, "Incorrect hasVIP passed")
		return (p4 and 2 or 1) > v_u_27.getNumTimesRerolled(p3)
	end,
	["getNumTimesRerolled"] = function(p8)
		-- upvalues: (copy) v_u_2, (copy) v_u_1
		local v9 = typeof(p8) == "Instance"
		assert(v9, "Invalid obj passed")
		local v10 = v_u_2
		assert(v10:HasTag(p8, "Contract"))
		local v11 = p8:FindFirstChild(v_u_1.REROLLED_VALUE_NAME)
		if v11 then
			return v11.Value
		else
			return nil
		end
	end,
	["getNumTimesRerolledObject"] = function(p12)
		-- upvalues: (copy) v_u_2, (copy) v_u_1
		local v13 = typeof(p12) == "Instance"
		assert(v13, "Invalid obj passed")
		local v14 = v_u_2
		assert(v14:HasTag(p12, "Contract"))
		return p12:FindFirstChild(v_u_1.REROLLED_VALUE_NAME) or nil
	end,
	["setNumTimesRerolled"] = function(p15, p16)
		-- upvalues: (copy) v_u_2, (copy) v_u_1
		local v17 = typeof(p15) == "Instance"
		assert(v17, "Invalid obj passed")
		local v18 = v_u_2
		assert(v18:HasTag(p15, "Contract"))
		local v19 = p15:FindFirstChild(v_u_1.REROLLED_VALUE_NAME)
		if not v19 then
			v19 = Instance.new("NumberValue")
			v19.Name = v_u_1.REROLLED_VALUE_NAME
			v19.Parent = p15
		end
		v19.Value = p16
		return true
	end,
	["getQuantizedBlock"] = function(p20, p21)
		local v22 = typeof(p20) == "number"
		assert(v22, "Duration must be a number")
		local v23 = p21 or 0
		if v23 then
			local v24 = (workspace:GetServerTimeNow() - v23) / p20
			return math.ceil(v24) * p20 + v23
		end
	end,
	["getNextDeadline"] = function()
		-- upvalues: (copy) v_u_27, (copy) v_u_1
		local v25 = {
			["year"] = 2023,
			["month"] = 7,
			["day"] = 31,
			["hour"] = 13
		}
		local v26 = DateTime.fromUniversalTime(v25.year, v25.month, v25.day, v25.hour - -4).UnixTimestamp
		return v_u_27.getQuantizedBlock(v_u_1.REFRESH_DURATION, v26)
	end
}
return v_u_27
