-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- BgMeBmV4cGVjdAJ0bwJiZQJvawR0ZXN0BXRocm93Aml0E3Nob3VsZCBjcmVhdGUgc3BpZXMzc2hvdWxkIHRocm93IGlmIHNwaWVzIGFyZSBpbmRleGVkIGJ5IGFuIGludmFsaWQga2V5BXZhbHVlCWNhbGxDb3VudAVlcXVhbAEzDHZhbHVlc0xlbmd0aAZ2YWx1ZXMmc2hvdWxkIGluY3JlbWVudCBjYWxsQ291bnQgd2hlbiBjYWxsZWQec2hvdWxkIHN0b3JlIGFsbCB2YWx1ZXMgcGFzc2VkLXNob3VsZCByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBpbm5lciBmdW5jdGlvbhBhc3NlcnRDYWxsZWRXaXRoLHNob3VsZCB0aHJvdyBpZiB0aGUgbnVtYmVyIG9mIHZhbHVlcyBkaWZmZXJzIXNob3VsZCB0aHJvdyBpZiBhbnkgdmFsdWUgZGlmZmVycwFhDWNhcHR1cmVWYWx1ZXMBYiRzaG91bGQgY2FwdHVyZSBhbGwgdmFsdWVzIGluIGEgdGFibGUHcmVxdWlyZQZzY3JpcHQGUGFyZW50CWNyZWF0ZVNweQhkZXNjcmliZQAdAAAAAAAAAYIAAQAAAAYAARgABgAAAAAGAAEAAAAP+wAAAMABAACfAAICpAQCAAAAEEBSBQAAnwQCAk0DBJIDAAAATQIDzAQAAABNAQIQBQAAAJ8BAQGCAAEABgYAAwEEAAAQQAMCAwMDBAEABQABGAAAAAIAAAAAAAAAAAAAAQYAAAAAAAAAAAAAAYIAAQAAAAwAARgADAAAAAACAAEAAAAE+wEAAE0AAZwAAAAAggACAAEDBQAOAAEYAAAAAA8AAAAABQABAAAADvsAAADAAQAAnwACAqQDAgAAABBA2QQBABIAAACfAwICTQIDkgMAAABNAQLbBAAAAJ8BAQGCAAEABQYCAwEEAAAQQAMCAwYCAgMLAAEYAAAAAgAAAAACAAAAAAEMAAAAAAMAAQAAAA2kAAEAAAAAQG8BAgDZAgAAEgIAAJ8AAwGkAAEAAAAAQG8BAwDZAgEAEgIAAJ8AAwGCAAEABAMHBAAAAEADCAMJAgEEBAABGAAAAAAAAAYAAAAAAAcFAAAAAAAAAAAAAAGCAAEAAAAWAAEYABYAAAAABQABAAAAEvsAAADAAQAAnwACAk0BAMwBAAAAnwEBAaQDAwAAACBATQQA5AQAAACfAwICTQIDkgUAAABNAQJ7BgAAAIwCAQCfAQIBggABAAcGBgMKAwEEAAAgQAMLAwIDDAEGFQABGAAAAAEAAAIAAAAAAAAAAAAAARYAAAAAAAAAAAAAAYIAAQAAAB0AARgAHQAAAAAGAAEAAAA5+wAAAMABAACfAAICTQEAzAEAAACMAgEAqQMBAG8EAgCfAQQBpAMEAAAAMEBNBAD7BQAAAJ8DAgJNAgOSBgAAAE0BAnsHAAAAjAIDAJ8BAgGkAwQAAAAwQE0FAMIIAAAAEwQFAJ8DAgJNAgOSBgAAAE0BAnsHAAAAjAIBAJ8BAgGkAwQAAAAwQE0FAMIIAAAAEwQFAZ8DAgJNAgOSBgAAAE0BAnsHAAAAqQIBAJ8BAgGkAwQAAAAwQE0FAMIIAAAAEwQFAp8DAgJNAgOSBgAAAE0BAnsHAAAAbwICAJ8BAgGCAAEACQYIAwoDDQMBBAAAMEADDgMCAwwDDwEIHAABGAAAAAEAAAAAAAIAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAR0AAAAAAQAAAAAAAqkAAQCCAAIAAAAnAAEYAAAoAAAAAAUAAQAAABD7AAAAwAEAAJ8AAgKkAwIAAAAQQE0EAMwDAAAAnwQBAJ8DAAJNAgOSBAAAAE0BAnsFAAAAqQIBAJ8BAgGCAAEABgYKAwEEAAAQQAMKAwIDDAEKJgABGAAAAAQAAAAAAAAAAAAAAAEnAAAAAAMAAQAAABOkAAEAAAAAQG8BAgDZAgAAEgIAAJ8AAwGkAAEAAAAAQG8BAwDZAgEAEgIAAJ8AAwGkAAEAAAAAQG8BBADZAgIAEgIAAJ8AAwGCAAEABQMHBAAAAEADEAMRAxIDBwkLFAABGAAAAAAAAAcAAAAAAAoAAAAAAAcVAAAAAAAAAAAAAAGCAAEAAAAxAAEYADEAAAAAAwABAAAABvsAAACMAgEAvAAAZgAAAACfAAMBggABAAEDEwA0AAEYAAAAAAABNQAAAAAFAAEAAAAT+wAAAMABAACfAAICTQEAzAEAAACMAgEAjAMCAJ8BAwGkAwMAAAAgQNkEAQASAAAAnwMCAk0CA5IEAAAATQEC2wUAAACfAQEBggABAAYGDQMKAwEEAAAgQAMCAwYCDQ4wAAEYAAAAAQAAAAACAAAAAAIAAAAAATEAAAAAAAAAAAAAAYIAAQAAADoAARgAOgAAAAAEAAEAAAAH+wAAAIwCAQCMAwMAvAAAZgAAAACfAAQBggABAAEDEwA9AAEYAAAAAAAAAT4AAAAABAABAAAAB/sAAACMAgIAjAMDALwAAGYAAAAAnwAEAYIAAQABAxMAQQABGAAAAAAAAAFCAAAAAAUAAQAAAB37AAAAwAEAAJ8AAgJNAQDMAQAAAIwCAQCMAwIAnwEDAaQDAwAAACBA2QQBABIAAACfAwICTQIDkgQAAABNAQLbBQAAAJ8BAQGkAwMAAAAgQNkEAgASAAAAnwMCAk0CA5IEAAAATQEC2wUAAACfAQEBggABAAYGEAMKAwEEAAAgQAMCAwYDEBESOQABGAAAAAEAAAAAAgAAAAACAAAAAAIAAAAAAgAAAAABOgAAAAADAAEAAAANpAABAAAAAEBvAQIA2QIAABICAACfAAMBpAABAAAAAEBvAQMA2QIBABICAACfAAMBggABAAQDBwQAAABAAxQDFQIPEy8AARgAAAAAAAAJAAAAAAAMMAAAAAAAAAAAAAABggABAAAASQABGABJAAAAAAMAAQAAAAb7AAAAbwIAALwAAKYBAAAAnwADAYIAAQACAxYDFwBMAAEYAAAAAAABTQAAAAAFAAEAAAAT+wAAAMABAACfAAICTQEAzAEAAACMAgEAjAMCAJ8BAwGkAwMAAAAgQNkEAQASAAAAnwMCAk0CA5IEAAAATQEC2wUAAACfAQEBggABAAYGFQMKAwEEAAAgQAMCAwYCFRZIAAEYAAAAAQAAAAACAAAAAAIAAAAAAUkAAAAAAAAAAAAAAYIAAQAAAFIAARgAUgAAAAAGAAEAAAAk+wAAAMABAACfAAICTQEAzAEAAACMAgEAjAMCAJ8BAwFvAwIAbwQDALwBAKYEAAAAnwEEAqQEBgAAAFBATQUBgAIAAACfBAICTQMEkgcAAABNAgN7CAAAAIwDAQCfAgIBpAQGAAAAUEBNBQGDAwAAAJ8EAgJNAwSSBwAAAE0CA3sIAAAAjAMCAJ8CAgGCAAEACQYYAwoDFgMYAxcDAQQAAFBAAwIDDAEYUQABGAAAAAEAAAAAAgAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAVIAAAAAAwABAAAADaQAAQAAAABAbwECANkCAAASAgAAnwADAaQAAQAAAABAbwEDANkCAQASAgAAnwADAYIAAQAEAwcEAAAAQAMUAxkCFxlHAAEYAAAAAAAACQAAAAAACEgAAAAABAAAAAAAIqQAAQAAAABApAMDAAAAIEBNAgMkBAAAAE0BAgAFAAAAnwACAqQBBwAAAGBAbwIFANkDAAASAAAAnwEDAaQBBwAAAGBAbwIIANkDAQASAAAAnwEDAaQBBwAAAGBAbwIJANkDAgASAAAAnwEDAaQBBwAAAGBAbwIKANkDAwASAAAAnwEDAYIAAQALAxoEAAAAQAMbBAAAIEADHAMdAx4EAABgQAMKAxMDFwQFDBQaAQABGAAAAAAAAAAAAAIAAAAAABAAAAAAABsAAAAAABgAAAAAABMCAAAAAAEAAAECAAOjAAAAwAAAAIIAAgABBhsBGwEAARgAAAABAAAAABwwDZnRLsR1BgLJ80U8Okox0rsxdwIAVuFxy7SxMFNTLY1S/kUms8WB

-- Decompiled by Krnl

return function()
	local v_u_1 = require(script.Parent.createSpy)
	describe("createSpy", function()
		-- upvalues: (copy) v_u_1
		it("should create spies", function()
			-- upvalues: (ref) v_u_1
			local v2 = v_u_1(function() end)
			expect(v2).to.be.ok()
		end)
		it("should throw if spies are indexed by an invalid key", function()
			-- upvalues: (ref) v_u_1
			local v_u_3 = v_u_1(function() end)
			expect(function()
				-- upvalues: (copy) v_u_3
				return v_u_3.test
			end).to.throw()
		end)
	end)
	describe("value", function()
		-- upvalues: (copy) v_u_1
		it("should increment callCount when called", function()
			-- upvalues: (ref) v_u_1
			local v4 = v_u_1(function() end)
			v4.value()
			expect(v4.callCount).to.equal(1)
		end)
		it("should store all values passed", function()
			-- upvalues: (ref) v_u_1
			local v5 = v_u_1(function() end)
			v5.value(1, true, "3")
			expect(v5.valuesLength).to.equal(3)
			expect(v5.values[1]).to.equal(1)
			expect(v5.values[2]).to.equal(true)
			expect(v5.values[3]).to.equal("3")
		end)
		it("should return the value of the inner function", function()
			-- upvalues: (ref) v_u_1
			local v6 = v_u_1(function()
				return true
			end)
			expect(v6.value()).to.equal(true)
		end)
	end)
	describe("assertCalledWith", function()
		-- upvalues: (copy) v_u_1
		it("should throw if the number of values differs", function()
			-- upvalues: (ref) v_u_1
			local v_u_7 = v_u_1(function() end)
			v_u_7.value(1, 2)
			expect(function()
				-- upvalues: (copy) v_u_7
				v_u_7:assertCalledWith(1)
			end).to.throw()
		end)
		it("should throw if any value differs", function()
			-- upvalues: (ref) v_u_1
			local v_u_8 = v_u_1(function() end)
			v_u_8.value(1, 2)
			expect(function()
				-- upvalues: (copy) v_u_8
				v_u_8:assertCalledWith(1, 3)
			end).to.throw()
			expect(function()
				-- upvalues: (copy) v_u_8
				v_u_8:assertCalledWith(2, 3)
			end).to.throw()
		end)
	end)
	describe("captureValues", function()
		-- upvalues: (copy) v_u_1
		it("should throw if the number of values differs", function()
			-- upvalues: (ref) v_u_1
			local v_u_9 = v_u_1(function() end)
			v_u_9.value(1, 2)
			expect(function()
				-- upvalues: (copy) v_u_9
				v_u_9:captureValues("a")
			end).to.throw()
		end)
		it("should capture all values in a table", function()
			-- upvalues: (ref) v_u_1
			local v10 = v_u_1(function() end)
			v10.value(1, 2)
			local v11 = v10:captureValues("a", "b")
			expect(v11.a).to.equal(1)
			expect(v11.b).to.equal(2)
		end)
	end)
end
