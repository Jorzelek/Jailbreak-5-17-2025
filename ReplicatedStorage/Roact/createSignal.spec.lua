-- Saved by UniversalSynSaveInstance (Join to Copy Games) https://discord.gg/wx4ThpAsmw

-- Bytecode (Base64):
-- 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

-- Decompiled by Krnl

return function()
	local v_u_1 = require(script.Parent.createSignal)
	local v_u_2 = require(script.Parent.createSpy)
	it("should fire subscribers and disconnect them", function()
		-- upvalues: (copy) v_u_1, (copy) v_u_2
		local v3 = v_u_1()
		local v4 = v_u_2()
		local v5 = v3:subscribe(v4.value)
		expect(v4.callCount).to.equal(0)
		local v6 = {}
		v3:fire(1, v6, "hello")
		expect(v4.callCount).to.equal(1)
		v4:assertCalledWith(1, v6, "hello")
		v5()
		v3:fire()
		expect(v4.callCount).to.equal(1)
	end)
	it("should handle multiple subscribers", function()
		-- upvalues: (copy) v_u_1, (copy) v_u_2
		local v7 = v_u_1()
		local v8 = v_u_2()
		local v9 = v_u_2()
		local v10 = v7:subscribe(v8.value)
		local v11 = v7:subscribe(v9.value)
		expect(v8.callCount).to.equal(0)
		expect(v9.callCount).to.equal(0)
		local v12 = {}
		v7:fire(v12, 67)
		expect(v8.callCount).to.equal(1)
		v8:assertCalledWith(v12, 67)
		expect(v9.callCount).to.equal(1)
		v9:assertCalledWith(v12, 67)
		v10()
		v7:fire(67, v12)
		expect(v8.callCount).to.equal(1)
		expect(v9.callCount).to.equal(2)
		v9:assertCalledWith(67, v12)
		v11()
	end)
	it("should stop firing a connection if disconnected mid-fire", function()
		-- upvalues: (copy) v_u_1, (copy) v_u_2
		local v13 = v_u_1()
		local v_u_14 = nil
		local v_u_15 = nil
		local v16 = v_u_2(function()
			-- upvalues: (ref) v_u_15
			v_u_15()
		end)
		local v17 = v_u_2(function()
			-- upvalues: (ref) v_u_14
			v_u_14()
		end)
		v_u_14 = v13:subscribe(v16.value)
		v_u_15 = v13:subscribe(v17.value)
		v13:fire()
		expect(v16.callCount + v17.callCount).to.equal(1)
	end)
	it("should allow adding listener in the middle of firing", function()
		-- upvalues: (copy) v_u_1, (copy) v_u_2
		local v_u_18 = v_u_1()
		local v_u_19 = nil
		local v_u_20 = v_u_2()
		local v21 = v_u_18:subscribe(function(_, _)
			-- upvalues: (ref) v_u_19, (copy) v_u_18, (copy) v_u_20
			v_u_19 = v_u_18:subscribe(v_u_20.value)
		end)
		expect(v_u_20.callCount).to.equal(0)
		local v22 = {}
		v_u_18:fire(v22, 67)
		expect(v_u_20.callCount).to.equal(0)
		v_u_18:fire(67, v22)
		expect(v_u_20.callCount).to.equal(1)
		v_u_20:assertCalledWith(67, v22)
		v_u_19()
		v21()
		v_u_18:fire(v22)
		expect(v_u_20.callCount).to.equal(1)
	end)
	it("should have one connection instance when add the same listener multiple times", function()
		-- upvalues: (copy) v_u_1, (copy) v_u_2
		local v23 = v_u_1()
		local v24 = v_u_2()
		local v25 = v23:subscribe(v24.value)
		expect(v24.callCount).to.equal(0)
		local v26 = {}
		v23:fire(v26, 67)
		expect(v24.callCount).to.equal(1)
		v24:assertCalledWith(v26, 67)
		local v27 = v23:subscribe(v24.value)
		v23:fire(67, v26)
		expect(v24.callCount).to.equal(2)
		v24:assertCalledWith(67, v26)
		v27()
		v23:fire(v26)
		expect(v24.callCount).to.equal(2)
		v25()
		v23:fire(v26)
		expect(v24.callCount).to.equal(2)
	end)
end
